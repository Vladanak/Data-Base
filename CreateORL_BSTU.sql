Use master;
create database TMPORL_BSTU;
USE TMPORL_BSTU;
create table FACULTY
(
Код_факультета char(10) not null,
constraint PK_FACULTY primary key(Код_факультета),
Наименование_факультета varchar(50) default '???',
)

insert into FACULTY   (Код_факультета,   Наименование_факультета )
             values  ('ИДиП',   'Издателькое дело и полиграфия');
insert into FACULTY   (Код_факультета,   Наименование_факультета )
            values  ('ХТиТ',   'Химическая технология и техника');
insert into FACULTY   (Код_факультета,   Наименование_факультета )
            values  ('ЛХФ',     'Лесохозяйственный факультет');
insert into FACULTY   (Код_факультета,   Наименование_факультета )
            values  ('ИЭФ',     'Инженерно-экономический факультет');
insert into FACULTY   (Код_факультета,   Наименование_факультета )
            values  ('ТТЛП',    'Технология и техника лесной промышленности');
insert into FACULTY   (Код_факультета,   Наименование_факультета )
            values  ('ТОВ',     'Технология органических веществ');
insert into FACULTY   (Код_факультета,   Наименование_факультета )
            values  ('ИТ',     'Факультет информационных технологий');


USE TMPORL_BSTU;
create table PROFESSION
(
Код_специальности char(20) not null,
constraint PK_PROFESSION primary key(Код_специальности),

Код_факультета char(10) not null,
constraint FK_PROFESSION_FACULTY foreign key (Код_факультета)

references FACULTY(Код_факультета),
Наименование_специальности varchar(100) null,

Квалификация varchar(50) null,
)

insert into PROFESSION(Код_факультета, Код_специальности, Наименование_специальности, Квалификация)    values    ('ИДиП',  '1-40 01 02',   'Информационные системы и технологии', 'инженер-программист-системотехник' );
 insert into PROFESSION(Код_факультета, Код_специальности, Наименование_специальности, Квалификация)    values    ('ИДиП',  '1-47 01 01', 'Издательское дело', 'редактор-технолог' );
 insert into PROFESSION(Код_факультета, Код_специальности,  Наименование_специальности, Квалификация)    values    ('ИДиП',  '1-36 06 01',  'Полиграфическое оборудование и си-стемы обработки информации', 'инженер-электромеханик' );                     
 insert into PROFESSION(Код_факультета, Код_специальности,  Наименование_специальности, Квалификация)  values    ('ХТиТ',  '1-36 01 08',    'Конструирование и производство из-делий из композиционных материалов', 'инженер-механик' );
 insert into PROFESSION(Код_факультета, Код_специальности,  Наименование_специальности, Квалификация)      values    ('ХТиТ',  '1-36 07 01',  'Машины и аппараты химических производств и предприятий строительных материалов', 'инженер-механик' );
 insert into PROFESSION(Код_факультета, Код_специальности, Наименование_специальности, Квалификация)  values    ('ЛХФ',  '1-75 01 01',      'Лесное хозяйство', 'инженер лесного хозяйства' );
 insert into PROFESSION(Код_факультета, Код_специальности,  Наименование_специальности, Квалификация)   values    ('ЛХФ',  '1-75 02 01',   'Садово-парковое строительство', 'инже-нер садово-паркового строительства' );
 insert into PROFESSION(Код_факультета, Код_специальности,     Наименование_специальности, Квалификация)   values    ('ЛХФ',  '1-89 02 02',     'Туризм и природопользование', 'специ-алист в сфере туризма' );
 insert into PROFESSION(Код_факультета, Код_специальности, Наименование_специальности, Квалификация)  values    ('ИЭФ',  '1-25 01 07',  'Экономика и управление на предприятии', 'экономист-менеджер' );
 insert into PROFESSION(Код_факультета, Код_специальности,  Наименование_специальности, Квалификация)      values    ('ИЭФ',  '1-25 01 08',    'Бухгалтерский учет, анализ и аудит', 'экономист' );                      
 insert into PROFESSION(Код_факультета, Код_специальности,     Наименование_специальности, Квалификация)  values    ('ТТЛП',  '1-36 05 01',   'Машины и оборудование лесного ком-плекса', 'инженер-механик' );
 insert into PROFESSION(Код_факультета, Код_специальности,   Наименование_специальности, Квалификация)   values    ('ТТЛП',  '1-46 01 01',      'Лесоинженерное дело', 'инженер-технолог' );
 insert into PROFESSION(Код_факультета, Код_специальности,     Наименование_специальности, Квалификация)      values    ('ТОВ',  '1-48 01 02',  'Химическая технология органических веществ, материалов и изделий', 'инженер-химик-технолог' );                
 insert into PROFESSION(Код_факультета, Код_специальности,   Наименование_специальности, Квалификация)    values    ('ТОВ',  '1-48 01 05',    'Химическая технология переработки древесины', 'инженер-химик-технолог' ); 
 insert into PROFESSION(Код_факультета, Код_специальности,    Наименование_специальности, Квалификация)  values    ('ТОВ',  '1-54 01 03',   'Физико-химические методы и приборы контроля качества продукции', 'инженер по сертификации' ); 


USE TMPORL_BSTU;
create table PULPIT
(
Код_кафедры char(10) not null,
constraint PK_PULPIT primary key(Код_кафедры),
Наименование_кафедры varchar(100) null,
Код_факультета char(10) not null,
constraint FK_PULPIT_FACULTY foreign key (Код_факультета)
references FACULTY(Код_факультета),
)

insert into PULPIT   (Код_кафедры, Наименование_кафедры, Код_факультета )
  values  ('ИСиТ', 'Информационных систем и технологий ','ИДиП'  ),
   ('ПОиСОИ','Полиграфического оборудования и систем обработки инфор-мации ', 'ИДиП'  ),
    ('БФ', 'Белорусской филологии','ИДиП'  ),
     ('РИТ', 'Редакционно-издательских тенологий', 'ИДиП'  ),      
     ('ПП', 'Полиграфических производств','ИДиП'  ) ,                             
      ('ЛВ', 'Лесоводства','ЛХФ')   ,       
    ('ОВ', 'Охотоведения','ЛХФ')    ,
     ('ЛУ', 'Лесоустройства','ЛХФ') ,          
    ('ЛЗиДВ', 'Лесозащиты и древесиноведения','ЛХФ') ,               
     ('ЛКиП', 'Лесных культур и почвоведения','ЛХФ') ,
     ('ТиП', 'Туризма и природопользования','ЛХФ')  ,            
     ('ЛПиСПС','Ландшафтного проектирования и садово-паркового строи-тельства','ЛХФ')  ,        
     ('ТЛ', 'Транспорта леса', 'ТТЛП')                     ,     
     ('ЛМиЛЗ','Лесных машин и технологии лесозаготовок','ТТЛП')  ,
     ('ТДП','Технологий деревообрабатывающих производств', 'ТТЛП')   ,
  ('ТиДИД','Технологии и дизайна изделий из древесины','ТТЛП')    ,
  ('ОХ', 'Органической химии','ТОВ') ,
  ('ТНХСиППМ','Технологии нефтехимического синтеза и переработки по-лимерных материалов','ТОВ'),
   ('ХПД','Химической переработки древесины','ТОВ')             ,
   ('ТНВиОХТ','Технологии неорганических веществ и общей химической технологии ','ХТиТ') ,
   ('ХТЭПиМЭЕ','Химии, технологии электрохимических производств и мате-риалов электронной техники',  'ХТиТ')  ,
      ('МиАХиСП','Машин и аппаратов химических и силикатных произ-водств', 'ХТиТ'),
      ('ПиАХП','Процессов и аппаратов химических производств','ХТиТ')  ,                                             
  ('ЭТиМ',    'Экономической теории и маркетинга','ИЭФ')   ,
    ('МиЭП',   'Менеджмента и экономики природопользования','ИЭФ')   ,
     ('СБУАиА', 'Статистики, бухгалтерского учета, анализа и аудита', 'ИЭФ')    ; 


USE TMPORL_BSTU;
create table TEACHER
(
Код_преподавателя char(10) not null,
primary key(Код_преподавателя),
ФИО_преподавателя varchar(100) null,
Пол char(1) CHECK (Пол in ('м','ж')),
Код_кафедры char(10) not null,
foreign key (Код_кафедры)
references PULPIT(Код_кафедры),
)

insert into  TEACHER    (Код_преподавателя,   ФИО_преподавателя, Пол, Код_кафедры )
                  Values ('СМЛВ',    'Смелов Владимир Владиславович', 'м',  'ИСиТ'),
                         ('АКНВЧ',    'Акунович Станислав Иванович', 'м', 'ИСиТ'),
                         ('КЛСНВ',    'Колесников Виталий Леонидович', 'м', 'ИСиТ'),
                         ('БРКВЧ',    'Бракович Андрей Игоревич', 'м', 'ИСиТ'),
                         ('ДТК',     'Дятко Александр Аркадьевич', 'м', 'ИСиТ'),
                         ('УРБ',     'Урбанович Павел Павлович', 'м', 'ИСиТ'),
                        ('ГРН',     'Гурин Николай Иванович', 'м', 'ИСиТ'),
                         ('ЖЛК',     'Жиляк Надежда Александровна',  'ж', 'ИСиТ'),                    
                         ('МРЗ',     'Мороз Елена Станиславовна',  'ж',   'ИСиТ'),                                                                                           
                        ('БРТШВЧ',   'Барташевич Святослав Александрович', 'м','ПОиСОИ'),
                         ('АРС',     'Арсентьев Виталий Арсентьевич', 'м', 'ПОиСОИ'),                      
                         ('БРНВСК',   'Барановский Станислав Иванович', 'м', 'ЭТиМ'),
                         ('НВРВ',   'Неверов Александр Васильевич', 'м', 'МиЭП'),
                         ('РВКЧ',   'Ровкач Андрей Иванович', 'м', 'ОВ'),
                         ('ДМДК', 'Демидко Марина Николаевна',  'ж',  'ЛПиСПС'),
                         ('БРГ',     'Бурганская Татьяна Минаевна', 'ж', 'ЛПиСПС'),
                         ('МШКВСК',   'Машковский Владимир Петрович', 'м', 'ЛУ'),
                         ('АТР',      'Атрощенко Олег Александрович', 'м', 'ЛУ'),                       
                         ('РЖК',   'Рожков Леонид Николаевич ', 'м', 'ЛВ'),                
                         ('ЗВГЦВ',   'Звягинцев Вячеслав Борисович', 'м', 'ЛЗиДВ'), 
                         ('БЗБРДВ',   'Безбородов Владимир Степанович', 'м', 'ОХ'), 
                         ('НСКВЦ',   'Насковец Михаил Трофимович', 'м', 'ТЛ'),
                         ('МХВ',   'Мохов Сергей Петрович', 'м', 'ЛМиЛЗ'),
                         ('ЕЩНК',   'Ещенко Людмила Семеновна',  'ж', 'ТНВиОХТ');                       


USE TMPORL_BSTU;
create table SUBJECT
(
Код_дисциплины char(10) not null,
constraint PK_SUBJECT primary key(Код_дисциплины),
Наименование_дисциплины varchar(100) null unique,
Код_кафедры char(10) not null,
constraint FK_SUBJECT_PULPIT foreign key (Код_кафедры)
references PULPIT(Код_кафедры),
)

insert into SUBJECT   (Код_дисциплины,   Наименование_дисциплины,        Код_кафедры )
                       Values ('СУБД',   'Системы управления базами данных','ИСиТ'),
                        ('БД',     'Базы данных','ИСиТ'),
                        ('ИНФ',    'Информационные технологии','ИСиТ'),
                        ('ОАиП',  'Основы алгоритмизации и программирования','ИСиТ'),
                        ('ПЗ',     'Представление знаний в компьютерных системах','ИСиТ'),
                        ('ПСП',    'Программирование сетевых приложений','ИСиТ'),
                        ('МСОИ',  'Моделирование систем обработки информации', 'ИСиТ'),
                        ('ПИС',     'Проектирование информационных систем','ИСиТ'),
                        ('КГ',      'Компьютерная геометрия ','ИСиТ'),
            ('ПМАПЛ',   'Полиграф. машины, автоматы и поточные линии', 'ПОиСОИ'),
                        ('КМС',     'Компьютерные мультимедийные системы', 'ИСиТ'),
                        ('ОПП',     'Организация полиграф. производства', 'ПОиСОИ'),
                        ('ДМ',   'Дискретная математика', 'ИСиТ'),
                       ('МП',   'Математическое программирование','ИСиТ'),
                ('ЛЭВМ', 'Логические основы ЭВМ',  'ИСиТ'),                   
                ('ООП',  'Объектно-ориентированное программирование', 'ИСиТ'),
                        ('ЭП', 'Экономика природопользования','МиЭП'),
                        ('ЭТ', 'Экономическая теория','ЭТиМ'),
                        ('БЛЗиПсOO','Биология лесных зверей и птиц с осн. охотов.','ОВ'),
                        ('ОСПиЛПХ','Основы садово-паркового и лесопаркового хозяйства',  'ЛПиСПС'),
                        ('ИГ', 'Инженерная геодезия ','ЛУ'),
                        ('ЛВ',    'Лесоводство', 'ЛЗиДВ') ,
                        ('ОХ',    'Органическая химия', 'ОХ')   ,
                        ('ТРИ',    'Технология резиновых изделий','ТНХСиППМ') ,
                        ('ВТЛ',    'Водный транспорт леса','ТЛ'),
                        ('ТиОЛ',   'Технология и оборудование лесозаготовок', 'ЛМиЛЗ') ,
                        ('ТОПИ',   'Технология обогащения полезных ископаемых ','ТНВиОХТ'),
                        ('ПЭХ',    'Прикладная электрохимия','ХТЭПиМЭЕ') ;                                                                                                                                                          


USE TMPORL_BSTU;
create table AUDITORIUM_TYPE
(
Код_типа_аудитории char(10) not null,
constraint PK_AUDITORIUM_TYPE primary key(Код_типа_аудитории),
Наименование_типа_аудитории varchar(30) null,
)

insert into AUDITORIUM_TYPE   (Код_типа_аудитории,  Наименование_типа_аудитории )        
values ('ЛК',            'Лекционная'),
  ('ЛБ-К',          'Компьютерный класс'),
  ('ЛК-К',          'Лекционная с уст. проектором'),
  ('ЛБ-X',          'Химическая лаборатория'),
   ('ЛБ-СК',   'Спец. компьютерный класс');


USE TMPORL_BSTU;
create table AUDITORIUM
(
Код_аудитории char(20) not null,
constraint PK_AUDITORIUM primary key(Код_аудитории),
Код_типа_аудитории char(10) not null,
constraint FK_AUDITORIUM_AUDITORIUM_TYPE foreign key (Код_типа_аудитории)
references AUDITORIUM_TYPE(Код_типа_аудитории),
Вместимость int,
Наименование_аудитории varchar(50) null,
)

insert into  AUDITORIUM   (Код_аудитории, Наименование_аудитории,  Код_типа_аудитории, Вместимость)   
Values  ('206-1', '206-1','ЛБ-К', 15),
  ('301-1',   '301-1', 'ЛБ-К', 15),
  ('236-1',   '236-1', 'ЛК',   60),
 ('313-1',   '313-1', 'ЛК-К',   60),
  ('324-1',   '324-1', 'ЛК-К',   50),
  ('413-1',   '413-1', 'ЛБ-К', 15),
  ('423-1',   '423-1', 'ЛБ-К', 90),
 ('408-2',   '408-2', 'ЛК',  90),
  ('103-4',   '103-4', 'ЛК',  90),
 ('105-4',   '105-4', 'ЛК',  90),
  ('107-4',   '107-4', 'ЛК',  90),
  ('110-4',   '110-4', 'ЛК',  30),
  ('111-4',   '111-4', 'ЛК',  30),
  ('114-4',   '114-4', 'ЛК-К',  90 );

USE TMPORL_BSTU;
create table GROUPS
(
Идентификатор_группы integer identity(1,1),
constraint PK_GROUPS primary key(Идентификатор_группы),
Код_факультета char(10) not null,
constraint FK_GROUPS_FACULTY foreign key (Код_факультета)
references FACULTY(Код_факультета),
Код_специальности char(20) not null,
constraint FK_GROUPS_PROFESSION foreign key (Код_специальности)
references PROFESSION(Код_специальности),
Год_поступления smallint check (Год_поступления<=YEAR(GETDATE())),
)

insert into GROUPS   (Код_факультета,  Код_специальности, Год_поступления )
         values ('ИДиП','1-40 01 02', 2013), --1
                ('ИДиП','1-40 01 02', 2012),
                ('ИДиП','1-40 01 02', 2011),
                ('ИДиП','1-40 01 02', 2010),
                ('ИДиП','1-47 01 01', 2013),---5 гр
                ('ИДиП','1-47 01 01', 2012),
                ('ИДиП','1-47 01 01', 2011),
                ('ИДиП','1-36 06 01', 2010),-----8 гр
                ('ИДиП','1-36 06 01', 2013),
                ('ИДиП','1-36 06 01', 2012),
                ('ИДиП','1-36 06 01', 2011),
                ('ХТиТ','1-36 01 08', 2013),---12 гр                                                  
                ('ХТиТ','1-36 01 08', 2012),
                ('ХТиТ','1-36 07 01', 2011),
                ('ХТиТ','1-36 07 01', 2010),
                ('ТОВ','1-48 01 02', 2012), ---16 гр 
                ('ТОВ','1-48 01 02', 2011),
                ('ТОВ','1-48 01 05', 2013),
                ('ТОВ','1-54 01 03', 2012),
                ('ЛХФ','1-75 01 01', 2013),--20 гр      
                ('ЛХФ','1-75 02 01', 2012),
                ('ЛХФ','1-75 02 01', 2011),
                ('ЛХФ','1-89 02 02', 2012),
                ('ЛХФ','1-89 02 02', 2011),  
                ('ТТЛП','1-36 05 01', 2013),
                ('ТТЛП','1-36 05 01', 2012),
                ('ТТЛП','1-46 01 01', 2012),--27 гр
                ('ИЭФ','1-25 01 07', 2013), 
                ('ИЭФ','1-25 01 07', 2012),     
                ('ИЭФ','1-25 01 07', 2010),
                ('ИЭФ','1-25 01 08', 2013),
                ('ИЭФ','1-25 01 08', 2012) ---32 гр       


USE TMPORL_BSTU;
create table STUDENT
(
Код_студента int identity (1000,1),
constraint PK_STUDENT primary key(Код_студента),
Идентификатор_группы int not null,
constraint FK_STUDENT_GROUPS foreign key (Идентификатор_группы)
references GROUPS(Идентификатор_группы),
ФИО nvarchar(100),
Дата_рождения date,
Штамп_времени timestamp,
Дополнительная_информация xml null,
Фотография varbinary(max) null,
)

insert into STUDENT (Идентификатор_группы,ФИО, Дата_рождения)
        values (1, 'Хартанович Екатерина Александровна','11.03.1995'),        
          (1, 'Горбач Елизавета Юрьевна',    '07.12.1995'),
           (1, 'Зыкова Кристина Дмитриевна',  '12.10.1995'),
           (1, 'Борисевич Ольга Анатольевна', '09.11.1995'),
           (1, 'Медведева Мария Андреевна',   '04.07.1995'),
           (1, 'Шенец Екатерина Сергеевна',   '08.01.1995'),
           (1, 'Шитик Алина Игоревна',        '02.08.1995')       
insert into STUDENT (Идентификатор_группы,ФИО, Дата_рождения)
    values (2, 'Силюк Валерия Ивановна',         '12.07.1994'),
           (2, 'Сергель Виолетта Николаевна',    '06.03.1994'),
           (2, 'Добродей Ольга Анатольевна',     '09.11.1994'),
           (2, 'Подоляк Мария Сергеевна',        '04.10.1994'),
           (2, 'Никитенко Екатерина Дмитриевна', '08.01.1994'),
           (3, 'Яцкевич Галина Иосифовна',       '02.08.1993'),
           (3, 'Осадчая Эла Васильевна',         '07.12.1993'),
           (3, 'Акулова Елена Геннадьевна',      '02.12.1993'),
           (3, 'Муковозчик Надежда Вячеславовна','09.11.1993'),
           (3, 'Войтко Елена Андреевна',         '04.07.1993'),
           (4, 'Плешкун Милана Анатольевна',     '08.03.1992'),
           (4, 'Буянова Мария Александровна',    '02.06.1992'),
           (4, 'Харченко Елена Геннадьевна',     '11.12.1992'),
           (4, 'Крученок Евгений Александрович', '11.05.1992'),
           (4, 'Бороховский Виталий Петрович',   '09.11.1992'),
           (4, 'Мацкевич Надежда Валерьевна',    '01.11.1992'),
           (5, 'Логинова Мария Вячеславовна',    '08.07.1995'),
           (5, 'Белько Наталья Николаевна',      '02.11.1995'),
           (5, 'Селило Екатерина Геннадьевна',   '07.05.1995'),
           (5, 'Свирский Михаил Марьянович',     '04.06.1995'),
           (5, 'Шамко Дмитрий Дмитриевич',       '09.09.1995'),
           (5, 'Дрозд Анастасия Андреевна',      '04.08.1995'),
           (6, 'Козловская Елена Евгеньевна',    '08.11.1994'),
           (6, 'Потапнин Кирилл Олегович',       '02.03.1994'),
           (6, 'Равковская Ольга Николаевна',    '04.06.1994'),
           (6, 'Ходоронок Александра Вадимовна', '09.11.1994'),
           (6, 'Рамук Владислав Юрьевич',        '04.07.1994'),
           (7, 'Неруганенок Мария Владимировна', '03.01.1993'),
           (7, 'Цыганок Анна Петровна',          '12.09.1993'),
           (7, 'Масилевич Оксана Игоревна',      '12.06.1993'),
           (7, 'Алексиевич Елизавета Викторовна','09.02.1993'),
           (7, 'Ватолин Максим Андреевич',       '04.07.1993'),
           (8, 'Синица Валерия Андреевна',       '08.01.1992'),
           (8, 'Кудряшова Алина Николаевна',     '12.05.1992'),
           (8, 'Мигулина Елена Леонидовна',      '08.11.1992'),
           (8, 'Шпиленя Алексей Сергеевич',      '12.03.1992'),
           (8, 'Ребко Светлана Сергеевна',       '10.01.1992'),
           (8, 'Ершов Юрий Олегович',            '12.07.1992'),
           (9, 'Астафьев Игорь Александрович',   '10.08.1995'),
           (9, 'Гайтюкевич Андрей Игоревич',     '02.05.1995'),
           (9, 'Рученя Наталья Александровна',   '08.01.1995'),
           (9, 'Тарасевич Анастасия Ивановна',   '11.09.1995'),
           (9, 'Скурат Наталья Ивановна',        '08.04.1995'),
           (9, 'Волосюк Николай Александрович',  '09.06.1995'),
           (10, 'Жоглин Николай Владимирович',   '08.01.1994'),
           (10, 'Санько Андрей Дмитриевич',      '11.09.1994'),
           (10, 'Пещур Анна Александровна',      '06.04.1994'),
           (10, 'Бучалис Никита Леонидович',     '12.08.1994'),
           (10, 'Трацевский Виктор Сергеевич',   '05.01.1994'),
           (10, 'Гамеза Денис Валерьевич',       '11.02.1994')           
insert into STUDENT (Идентификатор_группы,ФИО, Дата_рождения)
    values (11, 'Лавренчук Владислав Николаевич','07.11.1993'),
           (11, 'Власик Евгения Викторовна',     '04.06.1993'),
           (11, 'Абрамов Денис Дмитриевич',      '10.12.1993'),
           (11, 'Оленчик Сергей Николаевич',     '04.07.1993'),
           (11, 'Савинко Павел Андреевич',       '08.01.1993'),
           (11, 'Бакун Алексей Викторович',      '02.09.1993'),
           (12, 'Бань Сергей Анатольевич',       '11.12.1995'),
           (12, 'Сечейко Илья Александрович',    '10.06.1995'),
           (12, 'Кузмичева Анна Андреевна',      '09.08.1995'),
           (12, 'Бурко Диана Францевна',         '04.07.1995'),
           (12, 'Даниленко Максим Васильевич',   '08.03.1995'),
           (12, 'Зизюк Ольга Олеговна',          '12.09.1995'),
           (13, 'Шарапо Мария Владимировна',     '08.10.1994'),
           (13, 'Касперович Вадим Викторович',   '10.02.1994'),
           (13, 'Чупрыгин Арсений Александрович','11.11.1994'),
           (13, 'Воеводская Ольга Леонидовна',   '10.02.1994'),
           (13, 'Метушевский Денис Игоревич',    '12.01.1994'),
           (14, 'Ловецкая Валерия Александровна','11.09.1993'),
           (14, 'Дворак Антонина Николаевна',    '01.12.1993'),
           (14, 'Щука Татьяна Николаевна',       '09.06.1993'),
           (14, 'Коблинец Александра Евгеньевна','05.01.1993'),
           (14, 'Фомичевская Елена Эрнестовна',  '01.07.1993'),
           (15, 'Бесараб Маргарита Вадимовна',   '07.04.1992'),
           (15, 'Бадуро Виктория Сергеевна',     '10.12.1992'),
           (15, 'Тарасенко Ольга Викторовна',    '05.05.1992'),
           (15, 'Афанасенко Ольга Владимировна', '11.01.1992'),
           (15, 'Чуйкевич Ирина Дмитриевна',     '04.06.1992'),
           (16, 'Брель Алеся Алексеевна',        '08.01.1994'),
           (16, 'Кузнецова Анастасия Андреевна', '07.02.1994'),
           (16, 'Томина Карина Геннадьевна',     '12.06.1994'),
           (16, 'Дуброва Павел Игоревич',        '03.07.1994'),
           (16, 'Шпаков Виктор Андреевич',       '04.07.1994'),
           (17, 'Шнейдер Анастасия Дмитриевна',  '08.11.1993'),
           (17, 'Шыгина Елена Викторовна',       '02.04.1993'),
           (17, 'Клюева Анна Ивановна',          '03.06.1993'),
           (17, 'Доморад Марина Андреевна',      '05.11.1993'),
           (17, 'Линчук Михаил Александрович',   '03.07.1993'),
           (18, 'Васильева Дарья Олеговна',      '08.01.1995'),
           (18, 'Щигельская Екатерина Андреевна','06.09.1995'),
           (18, 'Сазонова Екатерина Дмитриевна', '08.03.1995'),
           (18, 'Бакунович Алина Олеговна',      '07.08.1995'),
           (18, 'Тарасова Дарья Николаевна',     '08.01.1995'),
           (18, 'Матиевская Анна Сергеевна',     '02.05.1995'),
           (19, 'Урбан Наталья Евгеньевна',      '08.06.1994'),
           (19, 'Никитенко Диана Валерьевна',    '08.07.1994'),
           (19, 'Черканович Дарья Леонидовна',   '03.10.1994'),
           (19, 'Торговцева Елена Михайловна',   '02.10.1994'),
           (19, 'Прокопчук Юлия Васильевна',     '01.10.1994'),
           (20, 'Протосюк Вероника Николаевна',  '07.03.1995'),
           (20, 'Нагорский Алексей Олегович',    '03.09.1995'),
           (20, 'Архипова Янина Игоревна',       '07.04.1995'),
           (20, 'Воробей Елена Сергеевна',       '08.06.1995');











    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    











use master  
go
create database ORL_BSTU
on primary
( name = N'ORL_BSTU_mdf', filename = N'D:\УЧЁБА\БД\лаб4\ORL_BSTU_mdf.mdf', 
   size = 5Mb, maxsize=10Mb, filegrowth=1Mb),
( name = N'ORL_BSTU_ndf', filename = N'D:\УЧЁБА\БД\лаб4\ORL_BSTU_ndf.ndf', 
   size = 5Mb, maxsize=10Mb, filegrowth=10%),
filegroup FG1
( name = N'ORL_BSTU11_ndf', filename = N'D:\УЧЁБА\БД\лаб4\ORL_BSTU11_ndf.ndf', 
   size = 10Mb, maxsize=15Mb, filegrowth=1Mb),
( name = N'ORL_BSTU12_ndf', filename = N'D:\УЧЁБА\БД\лаб4\ORL_BSTU12_ndf.ndf', 
   size = 2Mb, maxsize=5Mb, filegrowth=1Mb),
filegroup FG2
( name = N'ORL_BSTU21_ndf', filename = N'D:\УЧЁБА\БД\лаб4\ORL_BSTU21_ndf.ndf', 
   size = 5Mb, maxsize=10Mb, filegrowth=1Mb),
( name = N'ORL_BSTU22_ndf', filename = N'D:\УЧЁБА\БД\лаб4\ORL_BSTU22_ndf.ndf', 
   size = 2Mb, maxsize=5Mb, filegrowth=1Mb)
log on
( name = N'ORL_BSTU_log', filename=N'D:\УЧЁБА\БД\лаб4\ORL_BSTU_log.ldf',       
   size=5Mb,  maxsize=UNLIMITED, filegrowth=1Mb)
    go
    
    
    
    
    USE ORL_BSTU;
create table FACULTY
(
Код_факультета char(10) not null,
constraint PK_FACULTY primary key(Код_факультета),
Наименование_факультета varchar(50) default '???',
)

insert into FACULTY   (Код_факультета,   Наименование_факультета )
             values  ('ИДиП',   'Издателькое дело и полиграфия');
insert into FACULTY   (Код_факультета,   Наименование_факультета )
            values  ('ХТиТ',   'Химическая технология и техника');
insert into FACULTY   (Код_факультета,   Наименование_факультета )
            values  ('ЛХФ',     'Лесохозяйственный факультет');
insert into FACULTY   (Код_факультета,   Наименование_факультета )
            values  ('ИЭФ',     'Инженерно-экономический факультет');
insert into FACULTY   (Код_факультета,   Наименование_факультета )
            values  ('ТТЛП',    'Технология и техника лесной промышленности');
insert into FACULTY   (Код_факультета,   Наименование_факультета )
            values  ('ТОВ',     'Технология органических веществ');
insert into FACULTY   (Код_факультета,   Наименование_факультета )
            values  ('ИТ',     'Факультет информационных технологий');


USE ORL_BSTU;
create table PROFESSION
(
Код_специальности char(20) not null,
constraint PK_PROFESSION primary key(Код_специальности),
Код_факультета char(10) not null,
constraint FK_PROFESSION_FACULTY foreign key (Код_факультета)
references FACULTY(Код_факультета),
Наименование_специальности varchar(100) null,
Квалификация varchar(50) null,
)

insert into PROFESSION(Код_факультета, Код_специальности, Наименование_специальности, Квалификация)    values    ('ИДиП',  '1-40 01 02',   'Информационные системы и технологии', 'инженер-программист-системотехник' );
 insert into PROFESSION(Код_факультета, Код_специальности, Наименование_специальности, Квалификация)    values    ('ИДиП',  '1-47 01 01', 'Издательское дело', 'редактор-технолог' );
 insert into PROFESSION(Код_факультета, Код_специальности,  Наименование_специальности, Квалификация)    values    ('ИДиП',  '1-36 06 01',  'Полиграфическое оборудование и си-стемы обработки информации', 'инженер-электромеханик' );                     
 insert into PROFESSION(Код_факультета, Код_специальности,  Наименование_специальности, Квалификация)  values    ('ХТиТ',  '1-36 01 08',    'Конструирование и производство из-делий из композиционных материалов', 'инженер-механик' );
 insert into PROFESSION(Код_факультета, Код_специальности,  Наименование_специальности, Квалификация)      values    ('ХТиТ',  '1-36 07 01',  'Машины и аппараты химических производств и предприятий строительных материалов', 'инженер-механик' );
 insert into PROFESSION(Код_факультета, Код_специальности, Наименование_специальности, Квалификация)  values    ('ЛХФ',  '1-75 01 01',      'Лесное хозяйство', 'инженер лесного хозяйства' );
 insert into PROFESSION(Код_факультета, Код_специальности,  Наименование_специальности, Квалификация)   values    ('ЛХФ',  '1-75 02 01',   'Садово-парковое строительство', 'инже-нер садово-паркового строительства' );
 insert into PROFESSION(Код_факультета, Код_специальности,     Наименование_специальности, Квалификация)   values    ('ЛХФ',  '1-89 02 02',     'Туризм и природопользование', 'специ-алист в сфере туризма' );
 insert into PROFESSION(Код_факультета, Код_специальности, Наименование_специальности, Квалификация)  values    ('ИЭФ',  '1-25 01 07',  'Экономика и управление на предприятии', 'экономист-менеджер' );
 insert into PROFESSION(Код_факультета, Код_специальности,  Наименование_специальности, Квалификация)      values    ('ИЭФ',  '1-25 01 08',    'Бухгалтерский учет, анализ и аудит', 'экономист' );                      
 insert into PROFESSION(Код_факультета, Код_специальности,     Наименование_специальности, Квалификация)  values    ('ТТЛП',  '1-36 05 01',   'Машины и оборудование лесного ком-плекса', 'инженер-механик' );
 insert into PROFESSION(Код_факультета, Код_специальности,   Наименование_специальности, Квалификация)   values    ('ТТЛП',  '1-46 01 01',      'Лесоинженерное дело', 'инженер-технолог' );
 insert into PROFESSION(Код_факультета, Код_специальности,     Наименование_специальности, Квалификация)      values    ('ТОВ',  '1-48 01 02',  'Химическая технология органических веществ, материалов и изделий', 'инженер-химик-технолог' );                
 insert into PROFESSION(Код_факультета, Код_специальности,   Наименование_специальности, Квалификация)    values    ('ТОВ',  '1-48 01 05',    'Химическая технология переработки древесины', 'инженер-химик-технолог' ); 
 insert into PROFESSION(Код_факультета, Код_специальности,    Наименование_специальности, Квалификация)  values    ('ТОВ',  '1-54 01 03',   'Физико-химические методы и приборы контроля качества продукции', 'инженер по сертификации' ); 


USE ORL_BSTU;
create table PULPIT
(
Код_кафедры char(10) not null,
constraint PK_PULPIT primary key(Код_кафедры),
Наименование_кафедры varchar(100) null,
Код_факультета char(10) not null,
constraint FK_PULPIT_FACULTY foreign key (Код_факультета)
references FACULTY(Код_факультета),
) on FG1;

insert into PULPIT   (Код_кафедры, Наименование_кафедры, Код_факультета )
  values  ('ИСиТ', 'Информационных систем и технологий ','ИДиП'  ),
   ('ПОиСОИ','Полиграфического оборудования и систем обработки инфор-мации ', 'ИДиП'  ),
    ('БФ', 'Белорусской филологии','ИДиП'  ),
     ('РИТ', 'Редакционно-издательских тенологий', 'ИДиП'  ),      
     ('ПП', 'Полиграфических производств','ИДиП'  ) ,                             
      ('ЛВ', 'Лесоводства','ЛХФ')   ,       
    ('ОВ', 'Охотоведения','ЛХФ')    ,
     ('ЛУ', 'Лесоустройства','ЛХФ') ,          
    ('ЛЗиДВ', 'Лесозащиты и древесиноведения','ЛХФ') ,               
     ('ЛКиП', 'Лесных культур и почвоведения','ЛХФ') ,
     ('ТиП', 'Туризма и природопользования','ЛХФ')  ,            
     ('ЛПиСПС','Ландшафтного проектирования и садово-паркового строи-тельства','ЛХФ')  ,        
     ('ТЛ', 'Транспорта леса', 'ТТЛП')                     ,     
     ('ЛМиЛЗ','Лесных машин и технологии лесозаготовок','ТТЛП')  ,
     ('ТДП','Технологий деревообрабатывающих производств', 'ТТЛП')   ,
  ('ТиДИД','Технологии и дизайна изделий из древесины','ТТЛП')    ,
  ('ОХ', 'Органической химии','ТОВ') ,
  ('ТНХСиППМ','Технологии нефтехимического синтеза и переработки по-лимерных материалов','ТОВ'),
   ('ХПД','Химической переработки древесины','ТОВ')             ,
   ('ТНВиОХТ','Технологии неорганических веществ и общей химической технологии ','ХТиТ') ,
   ('ХТЭПиМЭЕ','Химии, технологии электрохимических производств и мате-риалов электронной техники',  'ХТиТ')  ,
      ('МиАХиСП','Машин и аппаратов химических и силикатных произ-водств', 'ХТиТ'),
      ('ПиАХП','Процессов и аппаратов химических производств','ХТиТ')  ,                                             
  ('ЭТиМ',    'Экономической теории и маркетинга','ИЭФ')   ,
    ('МиЭП',   'Менеджмента и экономики природопользования','ИЭФ')   ,
     ('СБУАиА', 'Статистики, бухгалтерского учета, анализа и аудита', 'ИЭФ')    ; 


USE ORL_BSTU;
create table TEACHER
(
Код_преподавателя char(10) not null,
primary key(Код_преподавателя),
ФИО_преподавателя varchar(100) null,
Пол char(1) CHECK (Пол in ('м','ж')),
Код_кафедры char(10) not null,
foreign key (Код_кафедры)
references PULPIT(Код_кафедры),
) on FG1;

insert into  TEACHER    (Код_преподавателя,   ФИО_преподавателя, Пол, Код_кафедры )
                  Values ('СМЛВ',    'Смелов Владимир Владиславович', 'м',  'ИСиТ'),
                         ('АКНВЧ',    'Акунович Станислав Иванович', 'м', 'ИСиТ'),
                         ('КЛСНВ',    'Колесников Виталий Леонидович', 'м', 'ИСиТ'),
                         ('БРКВЧ',    'Бракович Андрей Игоревич', 'м', 'ИСиТ'),
                         ('ДТК',     'Дятко Александр Аркадьевич', 'м', 'ИСиТ'),
                         ('УРБ',     'Урбанович Павел Павлович', 'м', 'ИСиТ'),
                        ('ГРН',     'Гурин Николай Иванович', 'м', 'ИСиТ'),
                         ('ЖЛК',     'Жиляк Надежда Александровна',  'ж', 'ИСиТ'),                    
                         ('МРЗ',     'Мороз Елена Станиславовна',  'ж',   'ИСиТ'),                                                                                           
                        ('БРТШВЧ',   'Барташевич Святослав Александрович', 'м','ПОиСОИ'),
                         ('АРС',     'Арсентьев Виталий Арсентьевич', 'м', 'ПОиСОИ'),                      
                         ('БРНВСК',   'Барановский Станислав Иванович', 'м', 'ЭТиМ'),
                         ('НВРВ',   'Неверов Александр Васильевич', 'м', 'МиЭП'),
                         ('РВКЧ',   'Ровкач Андрей Иванович', 'м', 'ОВ'),
                         ('ДМДК', 'Демидко Марина Николаевна',  'ж',  'ЛПиСПС'),
                         ('БРГ',     'Бурганская Татьяна Минаевна', 'ж', 'ЛПиСПС'),
                         ('МШКВСК',   'Машковский Владимир Петрович', 'м', 'ЛУ'),
                         ('АТР',      'Атрощенко Олег Александрович', 'м', 'ЛУ'),                       
                         ('РЖК',   'Рожков Леонид Николаевич ', 'м', 'ЛВ'),                
                         ('ЗВГЦВ',   'Звягинцев Вячеслав Борисович', 'м', 'ЛЗиДВ'), 
                         ('БЗБРДВ',   'Безбородов Владимир Степанович', 'м', 'ОХ'), 
                         ('НСКВЦ',   'Насковец Михаил Трофимович', 'м', 'ТЛ'),
                         ('МХВ',   'Мохов Сергей Петрович', 'м', 'ЛМиЛЗ'),
                         ('ЕЩНК',   'Ещенко Людмила Семеновна',  'ж', 'ТНВиОХТ');                       


USE ORL_BSTU;
create table SUBJECT
(
Код_дисциплины char(10) not null,
constraint PK_SUBJECT primary key(Код_дисциплины),
Наименование_дисциплины varchar(100) null unique,
Код_кафедры char(10) not null,
constraint FK_SUBJECT_PULPIT foreign key (Код_кафедры)
references PULPIT(Код_кафедры),
) on FG1;

insert into SUBJECT   (Код_дисциплины,   Наименование_дисциплины,        Код_кафедры )
                       Values ('СУБД',   'Системы управления базами данных','ИСиТ'),
                        ('БД',     'Базы данных','ИСиТ'),
                        ('ИНФ',    'Информационные технологии','ИСиТ'),
                        ('ОАиП',  'Основы алгоритмизации и программирования','ИСиТ'),
                        ('ПЗ',     'Представление знаний в компьютерных системах','ИСиТ'),
                        ('ПСП',    'Программирование сетевых приложений','ИСиТ'),
                        ('МСОИ',  'Моделирование систем обработки информации', 'ИСиТ'),
                        ('ПИС',     'Проектирование информационных систем','ИСиТ'),
                        ('КГ',      'Компьютерная геометрия ','ИСиТ'),
            ('ПМАПЛ',   'Полиграф. машины, автоматы и поточные линии', 'ПОиСОИ'),
                        ('КМС',     'Компьютерные мультимедийные системы', 'ИСиТ'),
                        ('ОПП',     'Организация полиграф. производства', 'ПОиСОИ'),
                        ('ДМ',   'Дискретная математика', 'ИСиТ'),
                       ('МП',   'Математическое программирование','ИСиТ'),
                ('ЛЭВМ', 'Логические основы ЭВМ',  'ИСиТ'),                   
                ('ООП',  'Объектно-ориентированное программирование', 'ИСиТ'),
                        ('ЭП', 'Экономика природопользования','МиЭП'),
                        ('ЭТ', 'Экономическая теория','ЭТиМ'),
                        ('БЛЗиПсOO','Биология лесных зверей и птиц с осн. охотов.','ОВ'),
                        ('ОСПиЛПХ','Основы садово-паркового и лесопаркового хозяйства',  'ЛПиСПС'),
                        ('ИГ', 'Инженерная геодезия ','ЛУ'),
                        ('ЛВ',    'Лесоводство', 'ЛЗиДВ') ,
                        ('ОХ',    'Органическая химия', 'ОХ')   ,
                        ('ТРИ',    'Технология резиновых изделий','ТНХСиППМ') ,
                        ('ВТЛ',    'Водный транспорт леса','ТЛ'),
                        ('ТиОЛ',   'Технология и оборудование лесозаготовок', 'ЛМиЛЗ') ,
                        ('ТОПИ',   'Технология обогащения полезных ископаемых ','ТНВиОХТ'),
                        ('ПЭХ',    'Прикладная электрохимия','ХТЭПиМЭЕ') ;                                                                                                                                                          


USE ORL_BSTU;
create table AUDITORIUM_TYPE
(
Код_типа_аудитории char(10) not null,
constraint PK_AUDITORIUM_TYPE primary key(Код_типа_аудитории),
Наименование_типа_аудитории varchar(30) null,
)

insert into AUDITORIUM_TYPE   (Код_типа_аудитории,  Наименование_типа_аудитории )        
values ('ЛК',            'Лекционная'),
  ('ЛБ-К',          'Компьютерный класс'),
  ('ЛК-К',          'Лекционная с уст. проектором'),
  ('ЛБ-X',          'Химическая лаборатория'),
   ('ЛБ-СК',   'Спец. компьютерный класс');


USE ORL_BSTU;
create table AUDITORIUM
(
Код_аудитории char(20) not null,
constraint PK_AUDITORIUM primary key(Код_аудитории),
Код_типа_аудитории char(10) not null,
constraint FK_AUDITORIUM_AUDITORIUM_TYPE foreign key (Код_типа_аудитории)
references AUDITORIUM_TYPE(Код_типа_аудитории),
Вместимость int,
Наименование_аудитории varchar(50) null,
) on FG2;

insert into  AUDITORIUM   (Код_аудитории, Наименование_аудитории,  Код_типа_аудитории, Вместимость)   
Values  ('206-1', '206-1','ЛБ-К', 15),
  ('301-1',   '301-1', 'ЛБ-К', 15),
  ('236-1',   '236-1', 'ЛК',   60),
 ('313-1',   '313-1', 'ЛК-К',   60),
  ('324-1',   '324-1', 'ЛК-К',   50),
  ('413-1',   '413-1', 'ЛБ-К', 15),
  ('423-1',   '423-1', 'ЛБ-К', 90),
 ('408-2',   '408-2', 'ЛК',  90),
  ('103-4',   '103-4', 'ЛК',  90),
 ('105-4',   '105-4', 'ЛК',  90),
  ('107-4',   '107-4', 'ЛК',  90),
  ('110-4',   '110-4', 'ЛК',  30),
  ('111-4',   '111-4', 'ЛК',  30),
  ('114-4',   '114-4', 'ЛК-К',  90 );

USE ORL_BSTU;
create table GROUPS
(
Идентификатор_группы integer identity(1,1),
constraint PK_GROUPS primary key(Идентификатор_группы),
Код_факультета char(10) not null,
constraint FK_GROUPS_FACULTY foreign key (Код_факультета)
references FACULTY(Код_факультета),
Код_специальности char(20) not null,
constraint FK_GROUPS_PROFESSION foreign key (Код_специальности)
references PROFESSION(Код_специальности),
Год_поступления smallint check (Год_поступления<=YEAR(GETDATE())),
) on FG1;

insert into GROUPS   (Код_факультета,  Код_специальности, Год_поступления )
         values ('ИДиП','1-40 01 02', 2013), --1
                ('ИДиП','1-40 01 02', 2012),
                ('ИДиП','1-40 01 02', 2011),
                ('ИДиП','1-40 01 02', 2010),
                ('ИДиП','1-47 01 01', 2013),---5 гр
                ('ИДиП','1-47 01 01', 2012),
                ('ИДиП','1-47 01 01', 2011),
                ('ИДиП','1-36 06 01', 2010),-----8 гр
                ('ИДиП','1-36 06 01', 2013),
                ('ИДиП','1-36 06 01', 2012),
                ('ИДиП','1-36 06 01', 2011),
                ('ХТиТ','1-36 01 08', 2013),---12 гр                                                  
                ('ХТиТ','1-36 01 08', 2012),
                ('ХТиТ','1-36 07 01', 2011),
                ('ХТиТ','1-36 07 01', 2010),
                ('ТОВ','1-48 01 02', 2012), ---16 гр 
                ('ТОВ','1-48 01 02', 2011),
                ('ТОВ','1-48 01 05', 2013),
                ('ТОВ','1-54 01 03', 2012),
                ('ЛХФ','1-75 01 01', 2013),--20 гр      
                ('ЛХФ','1-75 02 01', 2012),
                ('ЛХФ','1-75 02 01', 2011),
                ('ЛХФ','1-89 02 02', 2012),
                ('ЛХФ','1-89 02 02', 2011),  
                ('ТТЛП','1-36 05 01', 2013),
                ('ТТЛП','1-36 05 01', 2012),
                ('ТТЛП','1-46 01 01', 2012),--27 гр
                ('ИЭФ','1-25 01 07', 2013), 
                ('ИЭФ','1-25 01 07', 2012),     
                ('ИЭФ','1-25 01 07', 2010),
                ('ИЭФ','1-25 01 08', 2013),
                ('ИЭФ','1-25 01 08', 2012) ---32 гр       




















-- 5 лаба


SELECT  *  FROM  FACULTY;
SELECT  Наименование_факультета  from  FACULTY where  Код_факультета='ХТиТ';

SELECT  Код_преподавателя, Код_кафедры  from  TEACHER;

SELECT ФИО_преподавателя from TEACHER where Код_кафедры='ИСиТ';

SELECT ФИО_преподавателя from TEACHER where Код_кафедры='ИСиТ' or Код_кафедры='ПОиСОИ';

SELECT ФИО_преподавателя from TEACHER where Код_кафедры='ИСиТ' and Пол='ж';

SELECT ФИО_преподавателя from TEACHER where Код_кафедры='ИСиТ' and Пол<>'ж';

SELECT Distinct Код_кафедры FROM TEACHER;

SELECT Код_аудитории, Вместимость FROM AUDITORIUM Order by Вместимость Desc;

SELECT Distinct Код_дисциплины, Оценка from PROGRESS where Оценка BETWEEN '8' and '10';

SELECT Distinct Код_дисциплины, Код_кафедры from SUBJECT where Код_кафедры IN ('ЛЗиДВ', 'ПОиСОИ', 'ОВ');

SELECT Наименование_специальности, Квалификация from PROFESSION where Квалификация LIKE '%химик%';

use ORL_BSTU;
CREATE table  #STUDENTS
 (   ФИО nvarchar(100), День_рождение date );
    INSERT INTO #STUDENTS (ФИО, День_рождение)
     values ( 'Хартанович Екатерина Александровна','11.03.1995'),        
          ( 'Горбач Елизавета Юрьевна',    '07.12.1995'),
           ( 'Зыкова Кристина Дмитриевна',  '12.10.1995'),
           ( 'Борисевич Ольга Анатольевна', '09.11.1995'),
           ( 'Медведева Мария Андреевна',   '04.07.1995'),
           ( 'Шенец Екатерина Сергеевна',   '08.01.1995'),
           ('Шитик Алина Игоревна',        '02.08.1995')    
    SELECT  ФИО, День_рождение FROM STUDENT;
    SELECT  * FROM #STUDENTS;




use ORL_BSTU;
create table STUDENT 
( Код_студента   integer  identity(1000,1) constraint STUDENT_PK  primary key,
 Идентификатор_группы     integer  constraint STUDENT_GROUP_FK foreign key         
                      references GROUPS(Идентификатор_группы),        
 ФИО     nvarchar(100), 
 День_рождение     date,
 STAMP    timestamp,
 INFO     xml,
 FOTO     varbinary
 ) 
insert into STUDENT (Идентификатор_группы, ФИО, День_рождение)
        values (1, 'Хартанович Екатерина Александровна','11.03.1995'),        
          (1, 'Горбач Елизавета Юрьевна',    '07.12.1995'),
           (1, 'Зыкова Кристина Дмитриевна',  '12.10.1995'),
           (1, 'Борисевич Ольга Анатольевна', '09.11.1995'),
           (1, 'Медведева Мария Андреевна',   '04.07.1995'),
           (1, 'Шенец Екатерина Сергеевна',   '08.01.1995'),
           (1, 'Шитик Алина Игоревна',        '02.08.1995')       
insert into STUDENT (Идентификатор_группы,ФИО, День_рождение)
    values (2, 'Силюк Валерия Ивановна',         '12.07.1994'),
           (2, 'Сергель Виолетта Николаевна',    '06.03.1994'),
           (2, 'Добродей Ольга Анатольевна',     '09.11.1994'),
           (2, 'Подоляк Мария Сергеевна',        '04.10.1994'),
           (2, 'Никитенко Екатерина Дмитриевна', '08.01.1994'),
           (3, 'Яцкевич Галина Иосифовна',       '02.08.1993'),
           (3, 'Осадчая Эла Васильевна',         '07.12.1993'),
           (3, 'Акулова Елена Геннадьевна',      '02.12.1993'),
           (3, 'Муковозчик Надежда Вячеславовна','09.11.1993'),
           (3, 'Войтко Елена Андреевна',         '04.07.1993'),
           (4, 'Плешкун Милана Анатольевна',     '08.03.1992'),
           (4, 'Буянова Мария Александровна',    '02.06.1992'),
           (4, 'Харченко Елена Геннадьевна',     '11.12.1992'),
           (4, 'Крученок Евгений Александрович', '11.05.1992'),
           (4, 'Бороховский Виталий Петрович',   '09.11.1992'),
           (4, 'Мацкевич Надежда Валерьевна',    '01.11.1992'),
           (5, 'Логинова Мария Вячеславовна',    '08.07.1995'),
           (5, 'Белько Наталья Николаевна',      '02.11.1995'),
           (5, 'Селило Екатерина Геннадьевна',   '07.05.1995'),
           (5, 'Свирский Михаил Марьянович',     '04.06.1995'),
           (5, 'Шамко Дмитрий Дмитриевич',       '09.09.1995'),
           (5, 'Дрозд Анастасия Андреевна',      '04.08.1995'),
           (6, 'Козловская Елена Евгеньевна',    '08.11.1994'),
           (6, 'Потапнин Кирилл Олегович',       '02.03.1994'),
           (6, 'Равковская Ольга Николаевна',    '04.06.1994'),
           (6, 'Ходоронок Александра Вадимовна', '09.11.1994'),
           (6, 'Рамук Владислав Юрьевич',        '04.07.1994'),
           (7, 'Неруганенок Мария Владимировна', '03.01.1993'),
           (7, 'Цыганок Анна Петровна',          '12.09.1993'),
           (7, 'Масилевич Оксана Игоревна',      '12.06.1993'),
           (7, 'Алексиевич Елизавета Викторовна','09.02.1993'),
           (7, 'Ватолин Максим Андреевич',       '04.07.1993'),
           (8, 'Синица Валерия Андреевна',       '08.01.1992'),
           (8, 'Кудряшова Алина Николаевна',     '12.05.1992'),
           (8, 'Мигулина Елена Леонидовна',      '08.11.1992'),
           (8, 'Шпиленя Алексей Сергеевич',      '12.03.1992'),
           (8, 'Ребко Светлана Сергеевна',       '10.01.1992'),
           (8, 'Ершов Юрий Олегович',            '12.07.1992'),
           (9, 'Астафьев Игорь Александрович',   '10.08.1995'),
           (9, 'Гайтюкевич Андрей Игоревич',     '02.05.1995'),
           (9, 'Рученя Наталья Александровна',   '08.01.1995'),
           (9, 'Тарасевич Анастасия Ивановна',   '11.09.1995'),
           (9, 'Скурат Наталья Ивановна',        '08.04.1995'),
           (9, 'Волосюк Николай Александрович',  '09.06.1995'),
           (10, 'Жоглин Николай Владимирович',   '08.01.1994'),
           (10, 'Санько Андрей Дмитриевич',      '11.09.1994'),
           (10, 'Пещур Анна Александровна',      '06.04.1994'),
           (10, 'Бучалис Никита Леонидович',     '12.08.1994'),
           (10, 'Трацевский Виктор Сергеевич',   '05.01.1994'),
           (10, 'Гамеза Денис Валерьевич',       '11.02.1994')           
insert into STUDENT (Идентификатор_группы,ФИО, День_рождение)
    values (11, 'Лавренчук Владислав Николаевич','07.11.1993'),
           (11, 'Власик Евгения Викторовна',     '04.06.1993'),
           (11, 'Абрамов Денис Дмитриевич',      '10.12.1993'),
           (11, 'Оленчик Сергей Николаевич',     '04.07.1993'),
           (11, 'Савинко Павел Андреевич',       '08.01.1993'),
           (11, 'Бакун Алексей Викторович',      '02.09.1993'),
           (12, 'Бань Сергей Анатольевич',       '11.12.1995'),
           (12, 'Сечейко Илья Александрович',    '10.06.1995'),
           (12, 'Кузмичева Анна Андреевна',      '09.08.1995'),
           (12, 'Бурко Диана Францевна',         '04.07.1995'),
           (12, 'Даниленко Максим Васильевич',   '08.03.1995'),
           (12, 'Зизюк Ольга Олеговна',          '12.09.1995'),
           (13, 'Шарапо Мария Владимировна',     '08.10.1994'),
           (13, 'Касперович Вадим Викторович',   '10.02.1994'),
           (13, 'Чупрыгин Арсений Александрович','11.11.1994'),
           (13, 'Воеводская Ольга Леонидовна',   '10.02.1994'),
           (13, 'Метушевский Денис Игоревич',    '12.01.1994'),
           (14, 'Ловецкая Валерия Александровна','11.09.1993'),
           (14, 'Дворак Антонина Николаевна',    '01.12.1993'),
           (14, 'Щука Татьяна Николаевна',       '09.06.1993'),
           (14, 'Коблинец Александра Евгеньевна','05.01.1993'),
           (14, 'Фомичевская Елена Эрнестовна',  '01.07.1993'),
           (15, 'Бесараб Маргарита Вадимовна',   '07.04.1992'),
           (15, 'Бадуро Виктория Сергеевна',     '10.12.1992'),
           (15, 'Тарасенко Ольга Викторовна',    '05.05.1992'),
           (15, 'Афанасенко Ольга Владимировна', '11.01.1992'),
           (15, 'Чуйкевич Ирина Дмитриевна',     '04.06.1992'),
           (16, 'Брель Алеся Алексеевна',        '08.01.1994'),
           (16, 'Кузнецова Анастасия Андреевна', '07.02.1994'),
           (16, 'Томина Карина Геннадьевна',     '12.06.1994'),
           (16, 'Дуброва Павел Игоревич',        '03.07.1994'),
           (16, 'Шпаков Виктор Андреевич',       '04.07.1994'),
           (17, 'Шнейдер Анастасия Дмитриевна',  '08.11.1993'),
           (17, 'Шыгина Елена Викторовна',       '02.04.1993'),
           (17, 'Клюева Анна Ивановна',          '03.06.1993'),
           (17, 'Доморад Марина Андреевна',      '05.11.1993'),
           (17, 'Линчук Михаил Александрович',   '03.07.1993'),
           (18, 'Васильева Дарья Олеговна',      '08.01.1995'),
           (18, 'Щигельская Екатерина Андреевна','06.09.1995'),
           (18, 'Сазонова Екатерина Дмитриевна', '08.03.1995'),
           (18, 'Бакунович Алина Олеговна',      '07.08.1995'),
           (18, 'Тарасова Дарья Николаевна',     '08.01.1995'),
           (18, 'Матиевская Анна Сергеевна',     '02.05.1995'),
           (19, 'Урбан Наталья Евгеньевна',      '08.06.1994'),
           (19, 'Никитенко Диана Валерьевна',    '08.07.1994'),
           (19, 'Черканович Дарья Леонидовна',   '03.10.1994'),
           (19, 'Торговцева Елена Михайловна',   '02.10.1994'),
           (19, 'Прокопчук Юлия Васильевна',     '01.10.1994'),
           (20, 'Протосюк Вероника Николаевна',  '07.03.1995'),
           (20, 'Нагорский Алексей Олегович',    '03.09.1995'),
           (20, 'Архипова Янина Игоревна',       '07.04.1995'),
           (20, 'Воробей Елена Сергеевна',       '08.06.1995')







use ORL_BSTU;
create table PROGRESS
 ( Код_дисциплины   char(10) foreign key (Код_дисциплины)
    references SUBJECT(Код_дисциплины),                
 Код_студента integer  foreign key  (Код_студента)       
                      references STUDENT(Код_студента),        
 Дата_поступления    date, 
 Оценка     integer check (Оценка between 1 and 10)
  )
insert into PROGRESS (Код_дисциплины,Код_студента,Дата_поступления, Оценка)
    values ('ОАиП', 1000,  '01.10.2013',6),
           ('ОАиП', 1001,  '01.10.2013',8),
           ('ОАиП', 1002,  '01.10.2013',7),
           ('ОАиП', 1003,  '01.10.2013',5),
           ('ОАиП', 1005,  '01.10.2013',4)
insert into PROGRESS (Код_дисциплины,Код_студента,Дата_поступления, Оценка)
    values   ('СУБД', 1014,  '01.12.2013',5),
           ('СУБД', 1015,  '01.12.2013',9),
           ('СУБД', 1016,  '01.12.2013',5),
           ('СУБД', 1017,  '01.12.2013',4)
insert into PROGRESS (Код_дисциплины,Код_студента,Дата_поступления, Оценка)
    values ('КГ',   1018,  '06.5.2013',4),
           ('КГ',   1019,  '06.05.2013',7),
           ('КГ',   1020,  '06.05.2013',7),
           ('КГ',   1021,  '06.05.2013',9),
           ('КГ',   1022,  '06.05.2013',5),
           ('КГ',   1023,  '06.05.2013',6)
insert into PROGRESS (Код_дисциплины,Код_студента,Дата_поступления, Оценка)
    values ('ОХ',   1064,  '01.1.2013',6),
           ('ОХ',   1065,  '01.1.2013',4),
           ('ОХ',   1066,  '01.1.2013',9),
           ('ОХ',   1067,  '01.1.2013',5),
           ('ОХ',   1068,  '01.1.2013',8),
           ('ОХ',   1069,  '01.1.2013',4)
insert into PROGRESS (Код_дисциплины,Код_студента,Дата_поступления, Оценка)
    values ('ЭТ',   1055,  '01.1.2013',7),
           ('ЭТ',   1056,  '01.1.2013',8),
           ('ЭТ',   1057,  '01.1.2013',9),
           ('ЭТ',   1058,  '01.1.2013',4),
           ('ЭТ',   1059,  '01.1.2013',5)
           
           
           







-- 6 
use ORL_BSTU;

SELECT AUDITORIUM.Код_типа_аудитории, AUDITORIUM_TYPE.Наименование_типа_аудитории 
  From  AUDITORIUM Inner Join AUDITORIUM_TYPE
  On AUDITORIUM.Код_типа_аудитории= AUDITORIUM_TYPE.Код_типа_аудитории;


SELECT AUDITORIUM.Код_типа_аудитории, AUDITORIUM_TYPE.Наименование_типа_аудитории 
  From  AUDITORIUM Inner Join AUDITORIUM_TYPE
  On AUDITORIUM.Код_типа_аудитории= AUDITORIUM_TYPE.Код_типа_аудитории
  And   AUDITORIUM_TYPE.Наименование_типа_аудитории  Like  '%компьютер%';
  
  
SELECT AUDITORIUM.Код_типа_аудитории, AUDITORIUM_TYPE.Наименование_типа_аудитории 
  From  AUDITORIUM, AUDITORIUM_TYPE
  where AUDITORIUM.Код_типа_аудитории= AUDITORIUM_TYPE.Код_типа_аудитории;

SELECT AUDITORIUM.Код_типа_аудитории, AUDITORIUM_TYPE.Наименование_типа_аудитории 
  From  AUDITORIUM, AUDITORIUM_TYPE
  where AUDITORIUM.Код_типа_аудитории= AUDITORIUM_TYPE.Код_типа_аудитории
  And   AUDITORIUM_TYPE.Наименование_типа_аудитории  Like  '%компьютер%';
  
  

SELECT
Case 
   when ( PROGRESS.Оценка = 6) then 'шесть'
   when ( PROGRESS.Оценка = 7) then 'семь'
    else 'восемь'
    end   AS  Оценка    
 
, STUDENT.ФИО, SUBJECT.Наименование_дисциплины, PULPIT.Наименование_кафедры, FACULTY.Наименование_факультета, GROUPS.Код_специальности
  From  ((((STUDENT Inner Join PROGRESS
  On STUDENT.Код_студента= PROGRESS.Код_студента and PROGRESS.Оценка between 6 and 8) 
  Inner Join SUBJECT on SUBJECT.Код_дисциплины=PROGRESS.Код_дисциплины)
  Inner Join PULPIT on SUBJECT.Код_кафедры=PULPIT.Код_кафедры)
  Inner Join FACULTY on FACULTY.Код_факультета=PULPIT.Код_факультета)
  Inner Join GROUPS on GROUPS.Код_факультета=FACULTY.Код_факультета
  ORDER BY PROGRESS.Оценка 
  ;



SELECT
Case 
   when ( PROGRESS.Оценка = 6) then 'шесть'
   when ( PROGRESS.Оценка = 7) then 'семь'
    else 'восемь'
    end   AS  Оценка    
 
, STUDENT.ФИО, SUBJECT.Наименование_дисциплины, PULPIT.Наименование_кафедры, FACULTY.Наименование_факультета, GROUPS.Код_специальности
  From  ((((STUDENT Inner Join PROGRESS
  On STUDENT.Код_студента= PROGRESS.Код_студента and PROGRESS.Оценка between 6 and 8) 
  Inner Join SUBJECT on SUBJECT.Код_дисциплины=PROGRESS.Код_дисциплины)
  Inner Join PULPIT on SUBJECT.Код_кафедры=PULPIT.Код_кафедры)
  Inner Join FACULTY on FACULTY.Код_факультета=PULPIT.Код_факультета)
  Inner Join GROUPS on GROUPS.Идентификатор_группы=STUDENT.Идентификатор_группы
  ORDER BY ( Case 
  when ( PROGRESS.Оценка =7 ) then 1
    when ( PROGRESS.Оценка =8 )  then 2  
     else 3
    end   )
  ;
  
  
  SELECT isnull (TEACHER.ФИО_преподавателя, '***') AS Преподаватель,
PULPIT.Наименование_кафедры AS Кафедра
FROM  PULPIT  Left Outer JOIN  TEACHER
ON PULPIT.Код_кафедры = TEACHER.Код_кафедры

   SELECT isnull (TEACHER.ФИО_преподавателя, '***') AS Преподаватель,
PULPIT.Наименование_кафедры AS Кафедра
FROM  TEACHER  Left Outer JOIN  PULPIT
ON PULPIT.Код_кафедры = TEACHER.Код_кафедры



SELECT isnull (TEACHER.ФИО_преподавателя, '***') AS Преподаватель,
PULPIT.Наименование_кафедры AS Кафедра
FROM  PULPIT  RIGHT Outer JOIN  TEACHER
ON PULPIT.Код_кафедры = TEACHER.Код_кафедры



SELECT isnull (TEACHER.ФИО_преподавателя, '***') AS Преподаватель,
PULPIT.Наименование_кафедры AS Кафедра
FROM  PULPIT  FULL Outer JOIN  TEACHER
ON PULPIT.Код_кафедры = TEACHER.Код_кафедры
ORDER BY TEACHER.ФИО_преподавателя

SELECT isnull (TEACHER.ФИО_преподавателя, '***') AS Преподаватель,
PULPIT.Наименование_кафедры AS Кафедра
FROM  TEACHER  FULL Outer JOIN  PULPIT
ON PULPIT.Код_кафедры = TEACHER.Код_кафедры
ORDER BY TEACHER.ФИО_преподавателя


SELECT isnull (TEACHER.ФИО_преподавателя, '***') AS Преподаватель,
PULPIT.Наименование_кафедры AS Кафедра
FROM  TEACHER  INNER JOIN  PULPIT
ON PULPIT.Код_кафедры = TEACHER.Код_кафедры
ORDER BY TEACHER.ФИО_преподавателя



SELECT AUDITORIUM.Код_типа_аудитории, AUDITORIUM_TYPE.Наименование_типа_аудитории 
  From  AUDITORIUM CROSS Join AUDITORIUM_TYPE
  where AUDITORIUM.Код_типа_аудитории= AUDITORIUM_TYPE.Код_типа_аудитории;
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  -- 7 лаба
  use ORL_BSTU;
  
  
  SELECT   FACULTY.Код_факультета,  PULPIT.Наименование_кафедры,PROFESSION.Наименование_специальности 
  FROM FACULTY,PULPIT,PROFESSION  
 Where FACULTY.Код_факультета = PULPIT.Код_факультета and FACULTY.Код_факультета=PROFESSION.Код_факультета and
  Наименование_специальности  In (Select Наименование_специальности  FROM PROFESSION  
        Where (Наименование_специальности Like '%технология%' or Наименование_специальности Like '%технологии%'))  



 SELECT   FACULTY.Код_факультета,  PULPIT.Наименование_кафедры, PROFESSION.Наименование_специальности 
 FROM (FACULTY Inner JOIN PULPIT ON FACULTY.Код_факультета = PULPIT.Код_факультета) 
 Inner JOIN PROFESSION  ON FACULTY.Код_факультета = PROFESSION.Код_факультета
 Where Наименование_специальности  In (Select Наименование_специальности  FROM PROFESSION  
        Where (Наименование_специальности Like '%технология%' or Наименование_специальности Like '%технологии%'))  


 SELECT   FACULTY.Код_факультета,  PULPIT.Наименование_кафедры, PROFESSION.Наименование_специальности 
 FROM (FACULTY Inner JOIN PULPIT ON FACULTY.Код_факультета = PULPIT.Код_факультета) 
 Inner JOIN PROFESSION  ON FACULTY.Код_факультета = PROFESSION.Код_факультета
        Where (Наименование_специальности Like '%технология%' or Наименование_специальности Like '%технологии%')




SELECT distinct Код_типа_аудитории,Вместимость from  AUDITORIUM a
where  Вместимость = (select top(1) Вместимость  from AUDITORIUM aa
where aa.Код_типа_аудитории = a.Код_типа_аудитории 
order by  Вместимость  desc)




 SELECT  Наименование_факультета  from FACULTY
      Where not exists  (select * from PULPIT  
      Where PULPIT.Код_факультета = FACULTY.Код_факультета)




SELECT 
(select avg(Оценка) from PROGRESS
  where Код_дисциплины like 'ОАиП' ) [ОАиП],
  (select avg(Оценка) from PROGRESS
  where Код_дисциплины like 'СУБД' ) [СУБД],
  (select avg(Оценка) from PROGRESS
  where Код_дисциплины like 'БД' )[БД]  
  
  
  
  
  
SELECT Код_дисциплины, Оценка  from PROGRESS 
 Where Оценка >=all (select max(Оценка) from PROGRESS 
 where Код_дисциплины like 'ОАиП') 
 
 
 
 
 
 
SELECT Код_дисциплины, Оценка  from PROGRESS 
 Where Оценка >any (select max(Оценка) from PROGRESS 
 where Код_дисциплины like 'ОАиП') 
 
   
   
   
   
   
   
   
   

  -- 8 лаба
  use ORL_BSTU;
  SELECT MAX(Вместимость) [Максимальная вместимость],
  MIN(Вместимость) [Минимальная вместимость],
  AVG(Вместимость) [Средняя вместимость],
  COUNT(*) [Суммарная вместимость]
  FROM AUDITORIUM
  
  
  SELECT AUDITORIUM.Код_типа_аудитории,
  MAX(Вместимость) [Максимальная вместимость],
  MIN(Вместимость) [Минимальная вместимость],
  AVG(Вместимость) [Средняя вместимость],
  SUM(Вместимость) [Суммарная вместимость],
  COUNT(*) [Общее количество]
  FROM AUDITORIUM Inner Join AUDITORIUM_TYPE
  On AUDITORIUM.Код_типа_аудитории=AUDITORIUM_TYPE.Код_типа_аудитории
  Group by AUDITORIUM.Код_типа_аудитории
  
  
  SELECT  *
 FROM (select Case 
   when Оценка  between 4 and  5 then 'Оценка 4-5'
   when Оценка  between 6 and  7  then 'Оценка от 6 до 7'
   when Оценка  between 8 and  9  then 'Оценка от 8 до 9'
   else 'Оценка 10'
   end  [Оценка], COUNT (*) [Количество]    
FROM PROGRESS Group by Case 
   when Оценка  between 4 and  5 then 'Оценка 4-5'
   when Оценка  between 6 and  7  then 'Оценка от 6 до 7'
   when Оценка  between 8 and  9  then 'Оценка от 8 до 9'
   else 'Оценка 10'
   end ) as О
ORDER BY  Case [Оценка]
   when 'оценка 4-5' then 3
   when 'оценка от 6 до 7' then 2
   when 'оценка от 8 до 9' then 1
   else 0
   end  



SELECT  f.Код_факультета, 
                g.Код_специальности,  
                  s.Идентификатор_группы, 
                  round(avg(cast(p.Оценка as float(4))),2)
  From STUDENT s inner join PROGRESS p
            on s.Код_студента = p.Код_студента
            inner join GROUPS  g
            on s.Идентификатор_группы=g.Идентификатор_группы
            inner join FACULTY  f
            on g.Код_факультета=f.Код_факультета
   GROUP BY f.Код_факультета, 
                  g.Код_специальности,  
                  s.Идентификатор_группы
                  


SELECT  f.Код_факультета, 
                g.Код_специальности,  
                  s.Идентификатор_группы, 
                  round(avg(cast(p.Оценка as float(4))),2)
  From STUDENT s inner join PROGRESS p
            on s.Код_студента = p.Код_студента
            inner join GROUPS  g
            on s.Идентификатор_группы=g.Идентификатор_группы
            inner join FACULTY  f
            on g.Код_факультета=f.Код_факультета
            WHERE p.Код_дисциплины='СУБД' or p.Код_дисциплины='ОАиП'
   GROUP BY f.Код_факультета, 
                  g.Код_специальности,  
                  s.Идентификатор_группы
                  
                  
                  
  SELECT f.Код_факультета, g.Код_специальности, p.Код_дисциплины, AVG(p.Оценка) Оценка
FROM STUDENT s inner join PROGRESS p
            on s.Код_студента = p.Код_студента
            inner join GROUPS  g
            on s.Идентификатор_группы=g.Идентификатор_группы
            inner join FACULTY  f
            on g.Код_факультета=f.Код_факультета
WHERE f.Код_факультета IN ('ИДиП')
    GROUP BY ROLLUP (f.Код_факультета, g.Код_специальности, p.Код_дисциплины);



               
  SELECT f.Код_факультета, g.Код_специальности, p.Код_дисциплины, AVG(p.Оценка) Оценка
FROM STUDENT s inner join PROGRESS p
            on s.Код_студента = p.Код_студента
            inner join GROUPS  g
            on s.Идентификатор_группы=g.Идентификатор_группы
            inner join FACULTY  f
            on g.Код_факультета=f.Код_факультета
WHERE f.Код_факультета IN ('ИДиП')
    GROUP BY CUBE(f.Код_факультета, g.Код_специальности, p.Код_дисциплины);




SELECT f.Код_факультета, g.Код_специальности, p.Код_дисциплины, AVG(p.Оценка) Оценка
FROM STUDENT s inner join PROGRESS p
            on s.Код_студента = p.Код_студента
            inner join GROUPS  g
            on s.Идентификатор_группы=g.Идентификатор_группы
            inner join FACULTY  f
            on g.Код_факультета=f.Код_факультета
WHERE f.Код_факультета IN ('ИДиП')
    GROUP BY f.Код_факультета, g.Код_специальности, p.Код_дисциплины
UNION --объединение
SELECT f.Код_факультета, g.Код_специальности, p.Код_дисциплины, AVG(p.Оценка) Оценка
FROM STUDENT s inner join PROGRESS p
            on s.Код_студента = p.Код_студента
            inner join GROUPS  g
            on s.Идентификатор_группы=g.Идентификатор_группы
            inner join FACULTY  f
            on g.Код_факультета=f.Код_факультета
WHERE f.Код_факультета IN ('ХТиТ')
    GROUP BY f.Код_факультета, g.Код_специальности, p.Код_дисциплины



SELECT f.Код_факультета, g.Код_специальности, p.Код_дисциплины, AVG(p.Оценка) Оценка
FROM STUDENT s inner join PROGRESS p
            on s.Код_студента = p.Код_студента
            inner join GROUPS  g
            on s.Идентификатор_группы=g.Идентификатор_группы
            inner join FACULTY  f
            on g.Код_факультета=f.Код_факультета
WHERE f.Код_факультета IN ('ИДиП')
    GROUP BY f.Код_факультета, g.Код_специальности, p.Код_дисциплины
UNION ALL --объединение
SELECT f.Код_факультета, g.Код_специальности, p.Код_дисциплины, AVG(p.Оценка) Оценка
FROM STUDENT s inner join PROGRESS p
            on s.Код_студента = p.Код_студента
            inner join GROUPS  g
            on s.Идентификатор_группы=g.Идентификатор_группы
            inner join FACULTY  f
            on g.Код_факультета=f.Код_факультета
WHERE f.Код_факультета IN ('ХТиТ')
    GROUP BY f.Код_факультета, g.Код_специальности, p.Код_дисциплины




SELECT f.Код_факультета, g.Код_специальности, p.Код_дисциплины, AVG(p.Оценка) Оценка
FROM STUDENT s inner join PROGRESS p
            on s.Код_студента = p.Код_студента
            inner join GROUPS  g
            on s.Идентификатор_группы=g.Идентификатор_группы
            inner join FACULTY  f
            on g.Код_факультета=f.Код_факультета
WHERE f.Код_факультета IN ('ИДиП')
    GROUP BY f.Код_факультета, g.Код_специальности, p.Код_дисциплины
INTERSECT -- пересечение
SELECT f.Код_факультета, g.Код_специальности, p.Код_дисциплины, AVG(p.Оценка) Оценка
FROM STUDENT s inner join PROGRESS p
            on s.Код_студента = p.Код_студента
            inner join GROUPS  g
            on s.Идентификатор_группы=g.Идентификатор_группы
            inner join FACULTY  f
            on g.Код_факультета=f.Код_факультета
WHERE f.Код_факультета IN ('ХТиТ')
    GROUP BY f.Код_факультета, g.Код_специальности, p.Код_дисциплины




SELECT f.Код_факультета, g.Код_специальности, p.Код_дисциплины, AVG(p.Оценка) Оценка
FROM STUDENT s inner join PROGRESS p
            on s.Код_студента = p.Код_студента
            inner join GROUPS  g
            on s.Идентификатор_группы=g.Идентификатор_группы
            inner join FACULTY  f
            on g.Код_факультета=f.Код_факультета
WHERE f.Код_факультета IN ('ИДиП')
    GROUP BY f.Код_факультета, g.Код_специальности, p.Код_дисциплины
EXCEPT -- разность
SELECT f.Код_факультета, g.Код_специальности, p.Код_дисциплины, AVG(p.Оценка) Оценка
FROM STUDENT s inner join PROGRESS p
            on s.Код_студента = p.Код_студента
            inner join GROUPS  g
            on s.Идентификатор_группы=g.Идентификатор_группы
            inner join FACULTY  f
            on g.Код_факультета=f.Код_факультета
WHERE f.Код_факультета IN ('ХТиТ')
    GROUP BY f.Код_факультета, g.Код_специальности, p.Код_дисциплины



SELECT  p1.Код_дисциплины,  p1.Оценка, 
     (select  COUNT(*)  from PROGRESS p2 
      WHERE p2.Код_дисциплины = p1.Код_дисциплины  
      and  p2.Оценка = p1.Оценка)  [Количество]
FROM  PROGRESS p1 
   GROUP BY  p1.Код_дисциплины,  p1.Оценка
   HAVING  Оценка=8  or  Оценка=9 






-- 9 лаба

use ORL_BSTU;

   CREATE VIEW 	[Преподаватель]
	       as select Код_преподавателя [Код], 
                                ФИО_преподавателя [Имя преподавателя],
                                Пол,
	                      Код_кафедры [Код кафедры] from  TEACHER;

CREATE VIEW [Количество кафедр]	
  as SELECT  zk.Наименование_факультета [Факультет],
		       COUNT 		(tv.Код_факультета	) as [Количество]
		   from  FACULTY zk join  PULPIT tv  
		   on zk.Код_факультета = tv.Код_факультета
		   Group by Наименование_факультета
		   
insert [Количество кафедр] values ( 'Наименование_факультета', 4 )

	
	
	CREATE VIEW [Аудитории] as select AUDITORIUM.Код_аудитории as код,
 AUDITORIUM.Код_типа_аудитории as [наименование аудитории] 
from AUDITORIUM
where AUDITORIUM.Код_типа_аудитории like 'ЛК%'



CREATE VIEW [Лекционные аудитории] as select AUDITORIUM.Код_аудитории as код,
 AUDITORIUM.Код_типа_аудитории as [наименование аудитории] 
from AUDITORIUM
where AUDITORIUM.Код_типа_аудитории like 'ЛК%' WITH CHECK OPTION


CREATE VIEW  Дисциплины
	as select TOP 150 Код_дисциплины, Наименование_дисциплины, Код_кафедры  from SUBJECT
	    ORDER BY  Наименование_дисциплины;
	    
	    


alter VIEW [Количество кафедр]	WITH  SCHEMABINDING
  as SELECT  zk.Наименование_факультета [Факультет],
		       COUNT 		(tv.Код_факультета	) as [Количество]
		   from  dbo.FACULTY zk join  dbo.PULPIT tv  
		   on zk.Код_факультета = tv.Код_факультета
		   Group by zk.Наименование_факультета



-- 10 лаба

use ORL_BSTU;

DECLARE 
@a char=5, 
@b varchar(4)='БГТУ',
@c datetime,   
@d time(7),
@e int,
@f smallint,
@g tinyint,
@h numeric(12,5)=4.7 
SET @c=getdate(); -- tek data
SET @d=sysdatetime(); -- tek data i vremya
--SELECT @e e, @g g, @h h;
SELECT @a a, @b b, @c c;
print 'd= ' +cast(@d as varchar(10));
print 'h= ' +cast(@h as varchar(10));


DECLARE @a1 numeric(8,3)=(select CAST(sum(Вместимость)
as numeric(8,3))from AUDITORIUM),
 @a2 real, @a3 numeric(8,3), @a4 real, @a5 numeric(8,3)
 If @a1>200
 begin
 select @a2=(select CAST(count(*) as numeric(8,3))
  from AUDITORIUM),
 @a3=(select CAST(AVG(Вместимость)as numeric(8,3))
  from AUDITORIUM);
 SET @a4=(select cast(count(*) as numeric(8,3)) 
  from AUDITORIUM where Вместимость<@a3)
 select @a5=(select cast(count(*) as numeric(8,3))/@a2*100 
  from AUDITORIUM where Вместимость<@a3)
 SELECT @a1 'Общая вместимость', @a2 'Количество аудиторий', 
 @a3 'Средняя вместимость', 
 @a4 'Количество аудиторий меньше средней вместимости',
 @a5 'Процент аудиторий, вместимомость которых меньше средней'
 end
 IF @a1<200 print 'Общая вместимость < 200'
 
 
 select @@rowcount, @@VERSION, @@SPID, @@ERROR, 
 @@SERVERNAME, @@TRANCOUNT, @@FETCH_STATUS, @@NESTLEVEL
 
 
 DECLARE @t int=3, @x int=5, @z float;
 IF (@t>@x) SET @z=SIN(@t)*SIN(@t);
 IF (@t<@x) SET @z=4*(@t+@x);
 ELSE SET @z=1-EXP(@x-2);
 PRINT 'z='+cast(@z as varchar(10));
 

DECLARE @n int=(select COUNT(*) From STUDENT);
IF (select COUNT(*) From STUDENT)>500
print 'Количество учащихся больше 500. Количество='+cast(@n as varchar(10));
ELSE
print 'Количество учащихся меньше 500. Количество='+cast(@n as varchar(10));


SELECT  CASE 
                when Оценка between 0 and 3 then 'очень плохо' 
                when Оценка between 4 and 6 then 'нормально'
                when Оценка between 7 and 8 then 'хорошо'
                else   'отлично'
                end  Оценка , count(*) [Количество] 
           FROM dbo.PROGRESS 
           GROUP BY CASE 
                when Оценка between 0 and 3 then 'очень плохо' 
                when Оценка between 4 and 6 then 'нормально'
                when Оценка between 7 and 8 then 'хорошо'
                else   'отлично'
                end



CREATE table  #STUDENTSV
 ( Номер int, ФИО varchar(100), Дата_рождения date);
    SET nocount on;
    DECLARE @s int=0;
    WHILE @s<10
    begin
    INSERT #STUDENTSV (Номер, ФИО, Дата_рождения)
     values ( 1,'Хартанович Екатерина Александровна','11.03.1995'),        
          ( 2,'Горбач Елизавета Юрьевна',    '07.12.1995'),
           ( 3,'Зыкова Кристина Дмитриевна',  '12.10.1995'),
           ( 4,'Борисевич Ольга Анатольевна', '09.11.1995'),
           ( 5,'Медведева Мария Андреевна',   '04.07.1995'),
           ( 6,'Шенец Екатерина Сергеевна',   '08.01.1995'),
           (7,'Шитик Алина Игоревна',        '02.08.1995') ,
           ( 8,'Медведев Макар Игоревич',   '04.07.1995'),
           ( 9,'Шипулина Лариса Дмитриевна',   '08.01.1995'),
           (10,'Пархомчик Марина Александровна',  '02.08.1995') 
      IF (@s%100=0)
      print @s;
      SET @s=@s+1;
    end;
    
    
    CREATE table  #EXPLRE
 (   TIND int,  
  TFIELD varchar(100) );
SET nocount on;      --не выводить сообщения о вводе строк
DECLARE @i int=0; 
WHILE @i<1000
  begin 
  INSERT #EXPLRE(TIND, TFIELD) 
               values(floor(30000*rand()), replicate('строка', 10));
  IF(@i % 100=0) 
  print @i;     --вывести сообщение
  SET @i=@i+1;
  end;


DECLARE @xy int = 1
     print @xy*2+1
     print @xy*3+2 
     RETURN
         print @xy*4+3


begin TRY
update dbo.PROGRESS set Оценка = '5' where Код_дисциплины= 'СУБД'
end try
begin CATCH
print ERROR_NUMBER()
print ERROR_MESSAGE()
print ERROR_LINE()
print ERROR_PROCEDURE()
print ERROR_SEVERITY()
print ERROR_STATE()
end catch



DECLARE @ii int=0; 
CREATE table  #X (ii int, dt datetime)  
WHILE @ii<5
    begin 
    waitfor delay '00:00:02'
    SET @ii=@ii+1;
    INSERT #X(ii, dt) values(@ii, sysdatetime())
   end;
    SELECT * from #X




DECLARE @iii int=0; 
CREATE table  ##Y (iii int, dt datetime)  
WHILE @iii<5
    begin 
    waitfor delay '00:00:02'
    SET @iii=@iii+1;
    INSERT ##Y(iii, dt) values(@iii, sysdatetime())
   end;
    SELECT * from ##Y
    
    
    
-- 11 лаба

use ORL_BSTU;

exec SP_HELPINDEX'STUDENT';
exec SP_HELPINDEX'AUDITORIUM';
exec SP_HELPINDEX'AUDITORIUM_TYPE';
exec SP_HELPINDEX'TEACHER';
exec SP_HELPINDEX'PROGRESS';
exec SP_HELPINDEX'PROFESSION';
exec SP_HELPINDEX'GROUPS';
exec SP_HELPINDEX'PULPIT';
exec SP_HELPINDEX'SUBJECT';
exec SP_HELPINDEX'FACULTY';

CREATE table  #EXPLRE
 (   TIND int,  TFIELD varchar(100) );
 go
 set nocount on; -- не выводить сообщения о вводе строк
 declare @i int=0;
 while @i<1000
 begin
 insert #EXPLRE(TIND, TFIELD)
 values (FLOOR(5000*RAND()),REPLICATE('stroka',10));
 if (@i%1=0) print @i;
 set @i=@i+1;
 end;
 go
 select COUNT(*) [kolichestvo strok] from #EXPLRE;
 
 checkpoint;  --фиксация БД
 DBCC DROPCLEANBUFFERS;  --очистить буферный кэш

 CREATE clustered index #EXPLRE_CL on #EXPLRE(TIND asc) -- кластеризованный
 
 CREATE table  #EXPLR
 (   TIND int, CC int identity(1,1), TFIELD varchar(100) );
 go
 set nocount on;
 declare @i int=0;
 while @i<10000
 begin
 insert #EXPLR(TIND, TFIELD)
 values (FLOOR(5000*RAND()),REPLICATE('stroka',10));
 if (@i%1=0) print @i;
 set @i=@i+1;
 end;
 go
 select COUNT(*) [kolichestvo strok] from #EXPLR;
 
 CREATE index #EX_NONCLU on #EXPLR(TIND, CC) -- составной неуникальный, некластеризованный

SELECT * from  #EXPLR where  TIND > 1500 and  CC < 4500;  
SELECT * from  #EXPLR order by  TIND, CC;

SELECT * from  #EXPLR where  TIND = 556 and  CC > 3;

CREATE table  #EX	
 (   TKEY int, CC int identity(1,1), TFIELD varchar(100) );
 
 set nocount on;
 declare @i int=0;
 while @i<10000
 begin
 insert #EX(TKEY, TFIELD)
 values (FLOOR(5000*RAND()),REPLICATE('stroka',10));
 if (@i%1=0) print @i;
 set @i=@i+1;
 end;
 go
 select COUNT(*) [kolichestvo strok] from #EX;
 
 CREATE  index #EX_TKEY on #EX(TKEY) INCLUDE (CC); -- некластеризованный покрытия
 
 SELECT CC from #EX where TKEY>15000;
 
 CREATE table  #EXP
 (   TK int, CC int identity(1,1), TFIELD varchar(100) );
 go
 set nocount on;
 declare @i int=0;
 while @i<10000
 begin
 insert #EXP(TK, TFIELD)
 values (FLOOR(5000*RAND()),REPLICATE('stroka',10));
 if (@i%1=0) print @i;
 set @i=@i+1;
 end;
 go
 select COUNT(*) [kolichestvo strok] from #EXP;
 
 SELECT TK trom #EXP where TKEY between 5000 and 15000;
 
 SELECT TK trom #EXP where TKEY>10000 and TKEY<20000;
 
 SELECT TK trom #EXP where TKEY=8000;
 
 CREATE index #EXP_WHERE on #EXP(TK) where (TK>=5000 and TK<15000); -- некластеризованный фильтруемый
 
 CREATE table  #EXPL
 (   AA int,  BB varchar(100) );
 go
 set nocount on;
 declare @i int=0;
 while @i<1000
 begin
 insert #EXPL(AA, BB)
 values (FLOOR(5000*RAND()),REPLICATE('stroka',10));
 if (@i%1=0) print @i;
 set @i=@i+1;
 end;
 go
CREATE  index #EXPL_AA on #EXPL(AA); -- некластеризованный
SELECT name[Index], avg_fragmentation_in_percent [Fragmentation(%)]
FROM sys.dm_db_index_physical_stats(DB_ID(N'TEMPDB'),
OBJECT_ID(N'#EXPL'),NULL, NULL, NULL) ss
JOIN sys.indexes ii on ss.object_id=ii.object_id and ss.index_id=ii.index_id
where name is not null;

INSERT top(1000) #EXPL(AA, BB) select AA, BB from #EXPL;
 
ALTER index #EXPL_AA on #EXPL reorganize;
go

ALTER index #EXPL_AA on #EXPL rebuild with (online=off);


DROP index #EXPL_AA on #EXPL;
go
CREATE index #EXPL_AA on #EXPL(AA)with (fillfactor = 65);
go

INSERT top(50)percent into #EXPL(AA, BB) select AA, BB from #EXPL;
SELECT name [Индекс], avg_fragmentation_in_percent [Фрагментация (%)]
FROM sys.dm_db_index_physical_stats(DB_ID(N'TEMPDB'), OBJECT_ID(N'#EXPL'), NULL, NULL, NULL) ss
JOIN sys.indexes ii on ss.object_id = ii.object_id and ss.index_id = ii.index_id  
where name is not null;
go


use ORL_BSTU
CREATE VIEW [Количество кафедр]	
  as SELECT  zk.Наименование_факультета [Факультет],
		       COUNT 		(tv.Код_факультета	) as [Количество кафедр]
		   from  FACULTY zk join  PULPIT tv  
		   on zk.Код_факультета = tv.Код_факультета
		   Group by Наименование_факультета
		   

  as SELECT  zk.Наименование_факультета [Факультет],zk.Код_факультета,
		       COUNT 		(tv.Код_факультета	) as [Количество кафедр]
		   from  FACULTY zk join  PULPIT tv  
		   on zk.Код_факультета = tv.Код_факультета
		   Group by Наименование_факультета, zk.Код_факультета
		   
		   
	DROP index kk on PULPIT
		  
--12 лаба

use ORL_BSTU

DECLARE @kaf char(20), @k char(300)=' ';  
DECLARE dis CURSOR local for select Код_дисциплины from SUBJECT 
where Код_кафедры='ИСиТ';
	OPEN dis;	  
	FETCH  dis into @kaf;   
	print   'Дисциплины на кафедре ИСиТ';   
	while @@fetch_status = 0                                     
          begin 
             set @k = rtrim(@kaf)+', '+@k;         
             FETCH  dis into @kaf; 
          end;   
      print @k;        
  CLOSE  dis;


DECLARE @kaf char(20), @k char(300)=' ';  
DECLARE dis CURSOR local
for select Код_кафедры from PULPIT 
where Код_факультета='ХТиТ';
	OPEN dis;	  
	FETCH  dis into @kaf;   
	print   'Кафедры на факультете ХТиТ';   
	while @@fetch_status = 0                                     
          begin 
             set @k = rtrim(@kaf)+', '+@k;         
             FETCH  dis into @kaf; 
          end;   
      print @k;        
go
DECLARE @kaf char(20), @k char(300)=' ';  	  
	FETCH  dis into @kaf;   
	print   'Кафедры на факультете ХТиТ';   
	while @@fetch_status = 0                                     
          begin 
             set @k = rtrim(@kaf)+', '+@k;         
             FETCH  dis into @kaf; 
          end;   
      print @k;        
  CLOSE  dis;
  
  
DECLARE di CURSOR global 
for select Код_кафедры from PULPIT 
where Код_факультета='ХТиТ';
	OPEN di;
	go
	DECLARE @kaf char(20), @k char(300)=' ';	  
	FETCH  di into @kaf;   
	print   'Кафедры на факультете ХТиТ';   
	while @@fetch_status = 0                                     
          begin 
             set @k = rtrim(@kaf)+', '+@k;         
             FETCH  di into @kaf; 
          end;   
      print @k;        
  go
  DECLARE @kaf char(20), @k char(300)=' ';  	  
	FETCH  di into @kaf;   
	print   'Кафедры на факультете ХТиТ';   
	while @@fetch_status = 0                                     
          begin 
             set @k = rtrim(@kaf)+', '+@k;         
             FETCH  di into @kaf; 
          end;   
      print @k;        
  CLOSE  di;
  deallocate di;
  
  
  declare  @nm char(40), @gn char(1);
  declare c_teacher cursor local static
  for select ФИО_преподавателя, Пол from TEACHER
  where Код_кафедры='ИСиТ';
  open c_teacher;
  print 'Количество строк:' +cast(@@CURSOR_ROWS as varchar(9));
  
  update TEACHER set ФИО_преподавателя='XXX' where Код_преподавателя='АРС';
  delete TEACHER where Код_преподавателя='ШМК';
  insert TEACHER(Код_кафедры, Пол) values ('AAA', 'м');
  
  fetch c_teacher into @nm, @gn;
  while @@FETCH_STATUS=0
  begin
  print @nm+' '+@gn;
  fetch c_teacher into @nm, @gn;
  end;
  close c_teacher;
  
   declare  @nm char(40), @gn char(1);
  declare c_teacher cursor local dynamic
  for select ФИО_преподавателя, Пол from TEACHER
  where Код_кафедры='ИСиТ';
  open c_teacher;
  print 'Количество строк:' +cast(@@CURSOR_ROWS as varchar(9));
  
  update TEACHER set ФИО_преподавателя='XXX' where Код_преподавателя='АРС';
  delete TEACHER where Код_преподавателя='ШМК';
  insert TEACHER(Код_кафедры, Пол) values ('AAA', 'м');
  
  fetch c_teacher into @nm, @gn;
  while @@FETCH_STATUS=0
  begin
  print @nm+' '+@gn;
  fetch c_teacher into @nm, @gn;
  end;
  close c_teacher;
  
  
  declare  @n char(40), @g char(50);
  declare c_teacher cursor local dynamic scroll
  for select row_number() over (order by ФИО_преподавателя) N,ФИО_преподавателя from TEACHER
  where Код_кафедры='ИСиТ';
  open c_teacher;
  fetch c_teacher into @n, @g;
  print 'Следующая       :' +cast(@n as varchar(3))+'['+rtrim(@g)+']';
  fetch last from c_teacher into @n, @g;
  print 'Последняя       :' +cast(@n as varchar(3))+'['+rtrim(@g)+']';
  fetch first from c_teacher into @n, @g;
  print 'Первая          :' +cast(@n as varchar(3))+'['+rtrim(@g)+']';
  fetch absolute 10 from c_teacher into @n, @g;
  print 'С начала 10-ая  :' +cast(@n as varchar(3))+'['+rtrim(@g)+']';
  fetch absolute -10 from c_teacher into @n, @g;
  print 'С конца 10-ая   :' +cast(@n as varchar(3))+'['+rtrim(@g)+']';
  fetch next from c_teacher into @n, @g;
  print 'Следующая       :' +cast(@n as varchar(3))+'['+rtrim(@g)+']';
  close c_teacher;
  
  go
  declare @tid char(10), @tnm char(40), @tgn char(1);
  declare c_teacher cursor local dynamic
  for select Код_преподавателя, ФИО_преподавателя, Пол from TEACHER where Код_кафедры='ПОиСОИ' for UPDATE;
  open c_teacher;
  fetch c_teacher into @tid, @tnm, @tgn;
  delete TEACHER where current of c_teacher;
  fetch c_teacher into @tid, @tnm, @tgn;
  update TEACHER set ФИО_преподавателя='ХХXХ' where current of c_teacher;
  close c_teacher;
  select * from TEACHER where Код_кафедры='ПОиСОИ';
  
  
  
  
  
  
  
  
  
 -- 13
  
  
declare @c int, @flag char = 'c';           -- оператор фиксации commit или отката rollback?
	SET IMPLICIT_TRANSACTIONS  ON   -- включ. режим неявной транзакции
	 --   create table X(K int );                         -- начало транзакции 
		insert X values (1),(2),(3);
		set @c = (select count(*) from X);
		print 'количество строк в таблице X: ' + cast( @c as varchar(2));
		if @flag = 'c'  commit;                   -- завершение транзакции: фиксация 
	          else      rollback;                              -- завершение транзакции: откат  
      SET IMPLICIT_TRANSACTIONS  OFF   -- выключ. режим неявной транзакции
	-- действует режим автофиксации
	if  exists (select * from  SYS.OBJECTS       -- таблица X есть?
	            where OBJECT_ID= object_id(N'DBO.X') )
	print 'таблица X есть';  
	else print 'таблицы X нет'

  
  go
 begin try
	 begin transaction                 -- начало  явной транзакции
	   delete SUBJECT where Код_дисциплины='ДМ';
	   insert SUBJECT values ('ТГ', 'Теория графов','ИСиТ'  ),
	                         ('КБ', 'Комбинаторика','ИСиТ'  );
	   commit transaction;               -- фиксация транзакции
	end try
	begin catch
	    print 'ошибка: '+ case 
	      when error_number() = 547 and patindex('%FK_SUBJECT%', error_message()) > 0
          then 'нет кафедры с таким кодом' 
          when error_number() = 2627 and patindex('%PK_SUBJECT%', error_message()) > 0
          then 'дублирование кода информации' 
          else 'неизвестная ошибка: '+ cast(error_number() as  varchar(5))+ error_message()  
	  end; 
	 if @@trancount > 0 rollback transaction ; -- откат транзакции	  
     end catch;
     
     
     
     
declare @point varchar(32);                               -- макс. длина имени 32
begin try
  begin tran                                                             -- начало  явной транзакции
	delete SUBJECT where Код_дисциплины='ДМ'; 
	set @point = 'p1'; save tran @point;             -- контрольная точка p1
	insert SUBJECT values ('ТГ', 'Теория графов','ИСиТ'  );
	set @point = 'p2'; save tran @point;             -- контрольная точка p2
	insert SUBJECT values ('КБ', 'Комбинаторика','ИСиТ'  );
	commit tran;                                                     -- фиксация транзакции
   end try
   begin catch
	print 'ошибка: '+ case 
      when error_number() = 547 and patindex('%FK_SUBJECT%', error_message()) > 0
      then 'нет кафедры с таким кодом' 
      when error_number() = 2627 and patindex('%PK_SUBJECT%', error_message()) > 0
      then 'дублирование информации' 
      else 'неизвестная ошибка: '+ cast(error_number() as  varchar(5)) + error_message()  
	end; 
   if @@trancount > 0 
	begin
	   print 'контрольная точка: '+ @point;
	   rollback tran @point;                                   -- откат к контрольной точке
	   commit tran;                  -- фиксация изменений, выполненных до контрольной точки 
	end;     
   end catch;


select * from SUBJECT



-- A ---
	set transaction isolation level READ UNCOMMITTED  -- неподтвержденное чтение
	begin transaction 
	-------------------------- t1 ------------------
	  select @@SPID, 'insert FACULTY' 'результат', * from FACULTY 
	                                                             where Код_факультета='ИТ';
	  select @@SPID, 'update FACULTY'  'результат', * from PULPIT  
	                                               where Код_факультета='ИТ';
	  commit; 
	-------------------------- t2 -----------------
	--- B --	
	begin transaction 
	select @@SPID
	insert FACULTY values ('ИТ', 'Информационных Технологий'); 
	update PULPIT set Код_факультета = 'ИТ' 
                           where Код_кафедры= 'ИСиТ' 
	-------------------------- t1 --------------------
	-------------------------- t2 --------------------
	rollback;




-- A ---
      set transaction isolation level READ COMMITTED  -- неповторяющееся чтение
	begin transaction 
	select count(*) from PULPIT 
	where Код_факультета = 'ИТ';
	-------------------------- t1 ------------------ 
	-------------------------- t2 -----------------
	select  'update PULPIT'  'результат', count(*)
	from PULPIT  where Код_факультета = 'ИТ';
	commit; 
	--- B ---	
	begin transaction 	  
	-------------------------- t1 --------------------
          update PULPIT set Код_факультета = 'ИТ' 
                                       where Код_кафедры = 'ИСиТ' 
          commit; 




-- A ---
          set transaction isolation level  REPEATABLE READ -- фантомное чтение
	begin transaction 
	select Код_преподавателя from TEACHER where Код_кафедры = 'ПОиСОИ';
	-------------------------- t1 ------------------ 
	-------------------------- t2 -----------------
	select  case
          when Код_преподавателя = 'ПТР' then 'insert TEACHER'  else ' ' 
          end 'результат', Код_преподавателя from TEACHER  where Код_кафедры = 'ПОиСОИ';
	commit; 
	--- B ---	
	begin transaction 	  
	-------------------------- t1 --------------------
          insert TEACHER values ('ПТР', 'Петров Петр Петрович', 'м', 'ПОиСОИ');
          commit; 
	-------------------------- t2 --------------------






set transaction isolation level SNAPSHOT;
begin try
 begin tran
  select Код_преподавателя from TEACHER where Код_кафедры = 'ПОиСОИ'
  -------------------------t1---------------------------------------
  waitfor delay '00:00:10'; -- задержка
  -------------------------t2---------------------------------------
  delete TEACHER where Код_преподавателя = 'БРТШВЧ';
  select Код_преподавателя from TEACHER where Код_кафедры = 'ПОиСОИ'; 
 commit;
 end try
 begin catch
  print 'код ошибки:'+cast(error_number() as varchar(10));
  print 'сообщение:'+error_message();
  rollback;
 end catch;


begin transaction
 update TEACHER set Код_преподавателя='БРТ' where Код_преподавателя='БРТШВЧ';
commit


-- вложенные транзакции
begin tran -- внешняя транзакция
insert FACULTY values ('ИТ','Информационных технологий');
begin tran -- внутренняя транзакция
update PULPIT set Код_факультета='ИТ' where Код_кафедры='ИСиТ';
commit; -- внутренняя транзакция
if @@TRANCOUNT>0 rollback; -- внешняя транзакция
select 
 (select COUNT(*) from PULPIT where Код_кафедры='ИТ') 'Код_кафедры',
 (select COUNT(*) from FACULTY where Код_факультета='ИТ') 'Код_кафедры';



begin tran                                           --  внешняя транзакция   
insert FACULTY values ('ИТ',  'Информационных технологий');
begin tran                                          --  внутренняя транзакция  
update PULPIT set Код_факультета = 'ИТ' where Код_кафедры = 'ИСиТ';
commit;                                             --  внутренняя транзакция  
if @@trancount > 0  rollback;        -- внешняя транзакция 
select   (select count(*) from PULPIT where Код_факультета = 'ИТ') 'PULPIT', 
(select count(*) from FACULTY  where Код_факультета = 'ИТ') 'FACULTY'; 







-- 14 лаба



create procedure PSUBJECT
as begin
 select * from SUBJECT;
end

exec PSUBJECT; -- вызов процедуры


drop procedure PSUBJECT;


alter procedure PSUBJECT  -- модификация процедуры
 @p varchar(20),
 @c int output
as begin
 declare @rc int = (select COUNT(*) from SUBJECT);
 print 'параметры: @p=' +@p +', @c=' + cast (@c as varchar (3));
 select * from PULPIT where Код_кафедры=@p;
 set @c = @@ROWCOUNT;
 return @rc;
end;

declare @n int=0, @r int=0;
exec @n=PSUBJECT @p='ИСиТ', @c=@r output;
print 'код возврата:' + cast(@n as varchar(3));
print 'выходной параметр:' + cast(@r as varchar(3));

alter procedure PSUBJECT
 @p varchar(20)='ИСиТ'
as begin
 select * from SUBJECT where Код_кафедры=@p;
end;

exec PSUBJECT;


select top(0) * into #xxx from SUBJECT;
insert #xxx execute PSUBJECT @p='ИСиТ';





-- 15 лаба

create function COUNT_STUDENTS(@faculty varchar(20)) returns int  -- скалярная функция
    as begin  declare @rc int = 0;
    set @rc = (select count(Код_студента) 
	        from FACULTY f  join  GROUPS gr on f.Код_факультета=gr.Код_факультета
	                        join STUDENT st on st.Идентификатор_группы=gr.Идентификатор_группы
                   where f.Код_факультета = @faculty) ;  
	 return @rc;          
	end;  

declare @c int=dbo.COUNT_STUDENTS('ИДиП');
print 'Количество студентов на факультете ИДиП:'+cast(@c as varchar(4));

print 'Количество студентов на факультете ИДиП:'+cast(dbo.COUNT_STUDENTS('ИДиП') as varchar(4));

select Код_факультета 'Факультеты',
       dbo.COUNT_STUDENTS(Код_факультета) 'Количество студентов' from FACULTY;

select Код_факультета 'Факультеты' from FACULTY
       where dbo.COUNT_STUDENTS(Код_факультета)>20


create function dbo.FFACPUL() returns table  -- табличная функция
       as return select Код_факультета, Код_кафедры
       from PULPIT;
 
select * from FFACPUL()

-- ?
create function FCTEACHER(@p varchar(50)) returns int 
as
 begin
    declare @rc int =0;
    set @rc=(select count(Код_преподавателя) from TEACHER t join PULPIT p on t.Код_кафедры=p.Код_кафедры
    where Код_кафедры = @p);
    return @rc;
 end;
     select  Код_кафедры 'Кафедра', dbo.FCTEACHER(Код_кафедры) 'Количество преподавателей' from PULPIT;      
-- ?



-- 16 лаба

create table TR_AUDIT
( ID int identity,
  STMT varchar(20) check (STMT in ('INS','DEL','UPD')),
  TRNAME varchar(50),
  CC varchar(300) )
  
 create trigger TR_TEACHER_INS 
 on TEACHER after insert
 as declare @a1 char(10), @a2 varchar(100), @a3 char(1), @a4 char(10), @in varchar(300);
 print 'Insert operation';
 set @a1=(select[Код_преподавателя] from INSERTED);
 set @a2=(select[ФИО_преподавателя] from INSERTED);
 set @a3=(select[Пол] from INSERTED);
 set @a4=(select[Код_кафедры] from INSERTED);
 set @in=@a1+''+@a2+''+@a3+''+@a4;
 insert into TR_AUDIT(STMT,TRNAME,CC)
  values('INS','TR_TEACHER_INS',@in);
  return;
  go
  insert into TEACHER(Код_преподавателя,ФИО_преподавателя,Пол,Код_кафедры)
   values('ОРЛВ','Орловская Яна Владимировна','ж','ИСиТ');
   
  select * from TR_AUDIT
  
  
  create trigger TR_TEACHER
  on TEACHER after INSERT, DELETE, UPDATE
  as declare @a1 char(10), @a2 varchar(100), @a3 char(1), @a4 char(10), @in varchar(300);
  declare @ins int = (select count(*) from inserted),
              @del int = (select count(*) from deleted); 
   if  @ins > 0 and  @del = 0  begin print 'Событие: INSERT';
	set @a1=(select[Код_преподавателя] from INSERTED);
 set @a2=(select[ФИО_преподавателя] from INSERTED);
 set @a3=(select[Пол] from INSERTED);
 set @a4=(select[Код_кафедры] from INSERTED);
 set @in=@a1+''+@a2+''+@a3+''+@a4;
 insert into TR_AUDIT(STMT,TRNAME,CC)
  values('INS','TR_TEACHER_INS',@in);
	 end; else		  	 
    if @ins = 0 and  @del > 0  begin print 'Событие: DELETE';
	 set @a1=(select[Код_преподавателя] from deleted);
 set @a2=(select[ФИО_преподавателя] from deleted);
 set @a3=(select[Пол] from deleted);
 set @a4=(select[Код_кафедры] from deleted);
 set @in=@a1+''+@a2+''+@a3+''+@a4;
 insert into TR_AUDIT(STMT,TRNAME,CC)
  values('DEL','TR_TEACHER_INS',@in);
	  end; else	  
    if @ins > 0 and  @del > 0  begin print 'Событие: UPDATE'; 
	set @a1=(select[Код_преподавателя] from INSERTED);
 set @a2=(select[ФИО_преподавателя] from INSERTED);
 set @a3=(select[Пол] from INSERTED);
 set @a4=(select[Код_кафедры] from INSERTED);
 set @in=@a1+''+@a2+''+@a3+''+@a4;
 set @a1=(select[Код_преподавателя] from deleted);
 set @a2=(select[ФИО_преподавателя] from deleted);
 set @a3=(select[Пол] from deleted);
 set @a4=(select[Код_кафедры] from deleted);
 set @in=@a1+''+@a2+''+@a3+''+@a4;
 insert into TR_AUDIT(STMT, TRNAME, CC)  values('UPD', 'TR_TEACHER_INS', @in); 
	  end;  return;  

  insert into TEACHER(Код_преподавателя,ФИО_преподавателя,Пол,Код_кафедры)
   values('ПВЛК','Павлюкевич Владислав Олегович','м','ХТиТ');                   
  delete from TEACHER where Код_кафедры = 'ИСиТ';        
  update TEACHER set Код_преподавателя = 'ПВЛКВЧ' 
                             where ФИО_преподавателя = 'Павлюкевич Владислав Олегович';                
select * from TR_AUDIT



use master
go
create table SERVER_EVENT_LOG
(
id int identity,
ep xml
);

create trigger CREATE_db
on all server
for Create_database
as
print 'Создание базы данных';
insert SERVER_EVENT_LOG values (EVENTDATA());
go

select * from SERVER_EVENT_LOG;


-- 17 лаба

select * from TEACHER where Код_кафедры='ЛВ'

select * from TEACHER where Код_кафедры='ЛВ' for xml raw

select * from TEACHER where Код_кафедры='ЛВ' for xml raw('TAG')

select Код_преподавателя, Пол from TEACHER where Код_кафедры='ЛВ' for xml raw('TAG'), root('MYROOT')

select * from TEACHER where Код_кафедры='ЛВ' for xml auto

select p.Код_кафедры, t.Код_преподавателя, t.Пол
from PULPIT p join TEACHER t
 on p.Код_кафедры=t.Код_кафедры
where t.Код_кафедры in ('ЛВ','ПОиСОИ') order by p.Код_кафедры
for xml auto


create  trigger DDL_BSTU on database 
	for DDL_DATABASE_LEVEL_EVENTS  
          as   declare @t varchar(50)= EVENTDATA().value('(/EVENT_INSTANCE/EventType)[1]', 'varchar(50)');
          declare @t1 varchar(50)= 	 EVENTDATA().value('(/EVENT_INSTANCE/ObjectName)[1]', 'varchar(50)');
          declare @t2 varchar(50)= 	 EVENTDATA().value('(/EVENT_INSTANCE/ObjectType)[1]', 'varchar(50)'); 
  if @t1 = 'TEACHER' 
   begin
   print 'Тип события: '+@t;
   print 'Имя объекта: '+@t1;
   print 'Тип объекта: '+@t2;
   raiserror( N'операции с таблицей TEACHER запрещены', 16, 1);  
   rollback;    
   end;
   
   alter table TEACHER Drop Column Пол;
